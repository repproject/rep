INSERT INTO `rep`.`kmig_kb_prc_stat`
(`CMPX_IDF_ID`,
`HOUSE_TYP_SEQ`,
`STD_YYMM`,
`KB_LV1_REGN_CD`,
`KB_LV1_REGN_NM`,
`KB_LV2_REGN_CD`,
`KB_LV2_REGN_NM`,
`KB_LV3_REGN_CD`,
`KB_LV3_REGN_NM`,
`CMPX_IDF_NM`,
`X_COOR_VAL`,
`Y_COOR_VAL`,
`HOUSE_TYP_NM`,
`HOUSE_TYP_RPSN_NM`,
`ONLY_AERA`,
`SPLY_AERA`,
`UP_AVG_PRC`,
`GNRL_AVG_PRC`,
`DOWN_AVG_PRC`,
`UP_JS_AVG_PRC`,
`GNRL_JS_AVG_PRC`,
`DOWN_JS_AVG_PRC`,
`GNRL_GAP`,
`1M_PRC`,
`1M_JS_PRC`,
`1M_GAP`,
`1M_RISE_PRC`,
`1M_ROR`,
`1M_GAP_ROR`,
`3M_PRC`,
`3M_JS_PRC`,
`3M_GAP`,
`3M_RISE_PRC`,
`3M_ROR`,
`3M_GAP_ROR`,
`6M_PRC`,
`6M_JS_PRC`,
`6M_GAP`,
`6M_RISE_PRC`,
`6M_ROR`,
`6M_GAP_ROR`,
`1Y_PRC`,
`1Y_JS_PRC`,
`1Y_GAP`,
`1Y_RISE_PRC`,
`1Y_ROR`,
`1Y_GAP_ROR`,
`2Y_PRC`,
`2Y_JS_PRC`,
`2Y_GAP`,
`2Y_RISE_PRC`,
`2Y_ROR`,
`2Y_GAP_ROR`,
`3Y_PRC`,
`3Y_JS_PRC`,
`3Y_GAP`,
`3Y_RISE_PRC`,
`3Y_ROR`,
`3Y_GAP_ROR`,
`4Y_PRC`,
`4Y_JS_PRC`,
`4Y_GAP`,
`4Y_RISE_PRC`,
`4Y_ROR`,
`4Y_GAP_ROR`,
`5Y_PRC`,
`5Y_JS_PRC`,
`5Y_GAP`,
`5Y_RISE_PRC`,
`5Y_ROR`,
`5Y_GAP_ROR`,
`10Y_PRC`,
`10Y_JS_PRC`,
`10Y_GAP`,
`10Y_RISE_PRC`,
`10Y_ROR`,
`10Y_GAP_ROR`,
`REG_USER_ID`,
`REG_DTM`,
`CHG_USER_ID`,
`CHG_DTM`)
;
SELECT 
	   KCTMP.CMPX_IDF_ID         CMPX_IDF_ID
     , KCTMP.HOUSE_TYP_SEQ       HOUSE_TYP_SEQ
     , KCTMP.STD_YYMM            STD_YYMM
     , KR1.KB_REGN_CD            KB_LV1_REGN_CD
     , KR1.KB_REGN_NM            KB_LV1_REGN_NM
     , KR2.KB_REGN_CD            KB_LV2_REGN_CD
     , KR2.KB_REGN_NM            KB_LV2_REGN_NM     
     , KR3.KB_REGN_CD            KB_LV3_REGN_CD
     , KR3.KB_REGN_NM            KB_LV3_REGN_NM
     , KC.CMPX_IDF_NM            CMPX_IDF_NM
     , KC.X_COOR_VAL             X_COOR_VAL
     , KC.Y_COOR_VAL             Y_COOR_VAL
     , KCT.HOUSE_TYP_NM          HOUSE_TYP_NM
     , KCT.HOUSE_TYP_RPSN_NM     HOUSE_TYP_RPSN_NM
     , KCT.ONLY_AERA             ONLY_AERA
     , KCT.SPLY_AERA             SPLY_AERA
     , KCTMP.UP_AVG_PRC          UP_AVG_PRC
     , KCTMP.GNRL_AVG_PRC        GNRL_AVG_PRC
	 , KCTMP.DOWN_AVG_PRC        DOWN_AVG_PRC
     , KCTMP.UP_JS_AVG_PRC       UP_JS_AVG_PRC
     , KCTMP.GNRL_JS_AVG_PRC     GNRL_JS_AVG_PRC
     , KCTMP.DOWN_JS_AVG_PRC     DOWN_JS_AVG_PRC
     , KCTMP.GNRL_GAP            GNRL_GAP
     , KCTMP1M.GNRL_AVG_PRC      1M_PRC
     , KCTMP1M.GNRL_JS_AVG_PRC   1M_JS_PRC
     , KCTMP1M.GNRL_GAP          1M_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP1M.GNRL_AVG_PRC     1M_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP1M.GNRL_AVG_PRC - 1 1M_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP1M.GNRL_AVG_PRC)/KCTMP1M.GNRL_GAP 1M_GAP_ROR
     , KCTMP3M.GNRL_AVG_PRC      3M_PRC
     , KCTMP3M.GNRL_JS_AVG_PRC   3M_JS_PRC
     , KCTMP3M.GNRL_GAP          3M_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP3M.GNRL_AVG_PRC     3M_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP3M.GNRL_AVG_PRC - 1 3M_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP3M.GNRL_AVG_PRC)/KCTMP1M.GNRL_GAP 3M_GAP_ROR
     , KCTMP6M.GNRL_AVG_PRC      6M_PRC
     , KCTMP6M.GNRL_JS_AVG_PRC   6M_JS_PRC
     , KCTMP6M.GNRL_GAP          6M_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP6M.GNRL_AVG_PRC     6M_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP6M.GNRL_AVG_PRC - 1 6M_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP6M.GNRL_AVG_PRC)/KCTMP6M.GNRL_GAP 6M_GAP_ROR        
     , KCTMP1Y.GNRL_AVG_PRC      1Y_PRC
     , KCTMP1Y.GNRL_JS_AVG_PRC   1Y_JS_PRC
     , KCTMP1Y.GNRL_GAP          1Y_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP1Y.GNRL_AVG_PRC     1Y_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP1Y.GNRL_AVG_PRC - 1 1Y_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP1Y.GNRL_AVG_PRC)/KCTMP1Y.GNRL_GAP 1Y_GAP_ROR  
     , KCTMP2Y.GNRL_AVG_PRC      2Y_PRC
     , KCTMP2Y.GNRL_JS_AVG_PRC   2Y_JS_PRC
     , KCTMP2Y.GNRL_GAP          2Y_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP2Y.GNRL_AVG_PRC     2Y_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP2Y.GNRL_AVG_PRC - 1 2Y_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP2Y.GNRL_AVG_PRC)/KCTMP2Y.GNRL_GAP 2Y_GAP_ROR   
     , KCTMP3Y.GNRL_AVG_PRC      3Y_PRC
     , KCTMP3Y.GNRL_JS_AVG_PRC   3Y_JS_PRC
     , KCTMP3Y.GNRL_GAP          3Y_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP3Y.GNRL_AVG_PRC     3Y_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP3Y.GNRL_AVG_PRC - 1 3Y_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP3Y.GNRL_AVG_PRC)/KCTMP3Y.GNRL_GAP 3Y_GAP_ROR       
     , KCTMP4Y.GNRL_AVG_PRC      4Y_PRC
     , KCTMP4Y.GNRL_JS_AVG_PRC   4Y_JS_PRC
     , KCTMP4Y.GNRL_GAP          4Y_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP4Y.GNRL_AVG_PRC     4Y_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP4Y.GNRL_AVG_PRC - 1 4Y_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP4Y.GNRL_AVG_PRC)/KCTMP4Y.GNRL_GAP 4Y_GAP_ROR             
     , KCTMP5Y.GNRL_AVG_PRC      5Y_PRC
     , KCTMP5Y.GNRL_JS_AVG_PRC   5Y_JS_PRC
     , KCTMP5Y.GNRL_GAP          5Y_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP5Y.GNRL_AVG_PRC     5Y_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP5Y.GNRL_AVG_PRC - 1 5Y_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP5Y.GNRL_AVG_PRC)/KCTMP5Y.GNRL_GAP 5Y_GAP_ROR       
     , KCTMP10Y.GNRL_AVG_PRC      10Y_PRC
     , KCTMP10Y.GNRL_JS_AVG_PRC   10Y_JS_PRC
     , KCTMP10Y.GNRL_GAP          10Y_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP10Y.GNRL_AVG_PRC     10Y_RISE_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP10Y.GNRL_AVG_PRC - 1 10Y_ROR     
     , (KCTMP.GNRL_AVG_PRC - KCTMP10Y.GNRL_AVG_PRC)/KCTMP10Y.GNRL_GAP 10Y_GAP_ROR             
     , 1000000001 REG_USER_ID
     , NOW()      REG_DTM
     , 1000000001 CHG_USER_ID 
     , NOW()      CHG_DTM
FROM KMIG_KB_REGN KR1
INNER JOIN KMIG_KB_REGN KR2
ON KR1.KB_REGN_CD = KR2.UP_KB_REGN_CD
INNER JOIN KMIG_KB_REGN KR3
ON KR2.KB_REGN_CD = KR3.UP_KB_REGN_CD
INNER JOIN KMIG_KB_CMPX KC
ON KR3.KB_REGN_CD = KC.KB_REGN_CD
AND KC.CMPX_IDF_ID = 'KBA005572'
INNER JOIN KMIG_KB_CMPX_TYP KCT
ON KC.CMPX_IDF_ID = KCT.CMPX_IDF_ID
INNER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP
ON KCT.CMPX_IDF_ID = KCTMP.CMPX_IDF_ID
AND KCT.HOUSE_TYP_SEQ = KCTMP.HOUSE_TYP_SEQ
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP1M
ON KCTMP.CMPX_IDF_ID = KCTMP1M.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP1M.HOUSE_TYP_SEQ
AND (CASE WHEN  SUBSTR(KCTMP.STD_YYMM - 1,5,2)  = '00' THEN KCTMP.STD_YYMM - 1 - 88 WHEN SUBSTR(KCTMP.STD_YYMM - 1,5,2)  > '12' THEN KCTMP.STD_YYMM - 1 - 88 ELSE KCTMP.STD_YYMM - 1 END) = KCTMP1M.STD_YYMM
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP3M
ON KCTMP.CMPX_IDF_ID = KCTMP3M.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP3M.HOUSE_TYP_SEQ
AND (CASE WHEN  SUBSTR(KCTMP.STD_YYMM - 3,5,2)  = '00' THEN KCTMP.STD_YYMM - 3 - 88 WHEN SUBSTR(KCTMP.STD_YYMM - 3,5,2)  > '12' THEN KCTMP.STD_YYMM - 3 - 88 ELSE KCTMP.STD_YYMM - 3 END) = KCTMP3M.STD_YYMM
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP6M
ON KCTMP.CMPX_IDF_ID = KCTMP6M.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP6M.HOUSE_TYP_SEQ
AND (CASE WHEN  SUBSTR(KCTMP.STD_YYMM - 6,5,2)  = '00' THEN KCTMP.STD_YYMM - 6 - 88 WHEN SUBSTR(KCTMP.STD_YYMM - 6,5,2)  > '12' THEN KCTMP.STD_YYMM - 6 - 88 ELSE KCTMP.STD_YYMM - 6 END) = KCTMP6M.STD_YYMM
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP1Y
ON KCTMP.CMPX_IDF_ID = KCTMP1Y.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP1Y.HOUSE_TYP_SEQ
AND KCTMP.STD_YYMM - 100 = KCTMP1Y.STD_YYMM
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP2Y
ON KCTMP.CMPX_IDF_ID = KCTMP2Y.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP2Y.HOUSE_TYP_SEQ
AND KCTMP.STD_YYMM - 200 = KCTMP2Y.STD_YYMM
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP3Y
ON KCTMP.CMPX_IDF_ID = KCTMP3Y.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP3Y.HOUSE_TYP_SEQ
AND KCTMP.STD_YYMM - 300 = KCTMP3Y.STD_YYMM
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP4Y
ON KCTMP.CMPX_IDF_ID = KCTMP4Y.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP4Y.HOUSE_TYP_SEQ
AND KCTMP.STD_YYMM - 400 = KCTMP4Y.STD_YYMM
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP5Y
ON KCTMP.CMPX_IDF_ID = KCTMP5Y.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP5Y.HOUSE_TYP_SEQ
AND KCTMP.STD_YYMM - 500 = KCTMP5Y.STD_YYMM
LEFT OUTER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP10Y
ON KCTMP.CMPX_IDF_ID = KCTMP10Y.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP10Y.HOUSE_TYP_SEQ
AND KCTMP.STD_YYMM - 1000 = KCTMP10Y.STD_YYMM
;
SELECT STD_YYMM
     , CASE 
     WHEN  SUBSTR(STD_YYMM - 6,5,2)  = '00' 
     THEN STD_YYMM - 6 - 88
     WHEN SUBSTR(STD_YYMM - 6,5,2)  > '12'
     THEN STD_YYMM - 6 - 88   
     ELSE STD_YYMM - 6
     END DIFF
FROM KMIG_KB_CMPX_TYP_MON_PRC
ORDER BY CMPX_IDF_ID, HOUSE_TYP_SEQ
;
SELECT KCTMP1M.GNRL_AVG_PRC
     , KCTMP1M.GNRL_JS_AVG_PRC
     , KCTMP1M.GNRL_GAP
     , KCTMP.GNRL_AVG_PRC - KCTMP1M.GNRL_AVG_PRC
     , KCTMP.GNRL_AVG_PRC / KCTMP1M.GNRL_AVG_PRC - 1
     , (KCTMP.GNRL_AVG_PRC - KCTMP1M.GNRL_AVG_PRC) / KCTMP1M.GNRL_GAP
FROM KMIG_KB_CMPX_TYP_MON_PRC KCTMP
INNER JOIN KMIG_KB_CMPX_TYP_MON_PRC KCTMP1M
ON KCTMP.CMPX_IDF_ID = KCTMP1M.CMPX_IDF_ID
AND KCTMP.HOUSE_TYP_SEQ = KCTMP1M.HOUSE_TYP_SEQ
AND (CASE WHEN  SUBSTR(KCTMP.STD_YYMM - 1,5,2)  = '00' THEN KCTMP.STD_YYMM - 1 - 88 WHEN SUBSTR(KCTMP.STD_YYMM - 1,5,2)  > '12' THEN KCTMP.STD_YYMM - 1 - 88 ELSE KCTMP.STD_YYMM - 1 END) = KCTMP1M.STD_YYMM
;
SELECT * 
FROM KMIG_KB_CMPX_TYP
;

SELECT *
FROM KMIG_KB_CMPX A
LEFT OUTER JOIN KMIG_KB_CMPX_TYP T
ON A.CMPX_IDF_ID = T.CMPX_IDF_ID
WHere 1=1
AND T.CMPX_IDF_ID IS NULL

;
DELETE FROM
#SELECT * FROM 
kmig_kb_prc_stat

