C:\ProgramData\Anaconda3\envs\rep\python.exe C:/Users/Ceasar.DESKTOP-AQTREV4/PycharmProjects/rep/61.WorkSpace/Almighty/common/database/testReflect.py
2021-08-06 01:16:34,115 INFO sqlalchemy.engine.Engine SHOW VARIABLES LIKE 'sql_mode'
C:\ProgramData\Anaconda3\envs\rep\lib\site-packages\pymysql\cursors.py:170: Warning: (1366, "Incorrect string value: '\\xB4\\xEB\\xC7\\xD1\\xB9\\xCE...' for column 'VARIABLE_VALUE' at row 1")
2021-08-06 01:16:34,115 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,119 INFO sqlalchemy.engine.Engine SHOW VARIABLES LIKE 'lower_case_table_names'
  result = self._query(query)
2021-08-06 01:16:34,119 INFO sqlalchemy.engine.Engine [generated in 0.00014s] {}
2021-08-06 01:16:34,122 INFO sqlalchemy.engine.Engine SELECT DATABASE()
2021-08-06 01:16:34,122 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,126 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2021-08-06 01:16:34,126 INFO sqlalchemy.engine.Engine SHOW FULL TABLES FROM `rep`
2021-08-06 01:16:34,126 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,135 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `atcl_log`
2021-08-06 01:16:34,135 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,137 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `atcl_log_mig`
2021-08-06 01:16:34,137 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,139 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `hira`
2021-08-06 01:16:34,139 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,141 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_city_ymdh_weth`
2021-08-06 01:16:34,141 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,143 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_date_prod_prc`
2021-08-06 01:16:34,143 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,145 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_day_prod_anal`
2021-08-06 01:16:34,145 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,147 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_day_prod_prc`
2021-08-06 01:16:34,147 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,150 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_day_siml_trad`
2021-08-06 01:16:34,150 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,152 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_exmk_std_day`
2021-08-06 01:16:34,152 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,153 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_prod`
2021-08-06 01:16:34,153 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,156 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_prod_ctgr`
2021-08-06 01:16:34,156 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,158 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_ptn`
2021-08-06 01:16:34,158 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,159 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_ptn_attr`
2021-08-06 01:16:34,159 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,161 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_ptn_siml`
2021-08-06 01:16:34,161 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,162 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_ptn_siml_prod_eval`
2021-08-06 01:16:34,162 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,165 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_ptn_val`
2021-08-06 01:16:34,165 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,166 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_snro`
2021-08-06 01:16:34,166 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,168 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_snro_prod`
2021-08-06 01:16:34,168 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,170 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_snro_ptn`
2021-08-06 01:16:34,170 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,171 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_snro_siml`
2021-08-06 01:16:34,172 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,173 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `jmig_stk_prod`
2021-08-06 01:16:34,173 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,175 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_act`
2021-08-06 01:16:34,175 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,177 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_act_func`
2021-08-06 01:16:34,177 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,179 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_com_cd_dtl`
2021-08-06 01:16:34,179 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,181 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_com_cd_lst`
2021-08-06 01:16:34,181 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,183 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_func`
2021-08-06 01:16:34,183 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,185 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_func_tgt_tbl`
2021-08-06 01:16:34,185 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,186 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_job`
2021-08-06 01:16:34,186 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,188 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_job_act`
2021-08-06 01:16:34,188 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,190 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_job_exec`
2021-08-06 01:16:34,190 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,193 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_job_func_exec`
2021-08-06 01:16:34,193 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,195 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_job_func_exec_msg`
2021-08-06 01:16:34,195 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,197 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_job_schd`
2021-08-06 01:16:34,197 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,199 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_menu`
2021-08-06 01:16:34,199 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,201 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_site`
2021-08-06 01:16:34,201 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,203 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_std_yymm`
2021-08-06 01:16:34,203 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,204 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_svc`
2021-08-06 01:16:34,204 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,206 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_svc_bak`
2021-08-06 01:16:34,206 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,208 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_svc_parm`
2021-08-06 01:16:34,208 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,210 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_svc_pasi`
2021-08-06 01:16:34,210 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,211 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_svc_pasi_item`
2021-08-06 01:16:34,212 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,213 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_tbl`
2021-08-06 01:16:34,213 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,215 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_tbl_col`
2021-08-06 01:16:34,215 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,217 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_tlgr_msg`
2021-08-06 01:16:34,217 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,219 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_tlgr_user`
2021-08-06 01:16:34,219 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,221 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kadm_tmp_cd_dtl`
2021-08-06 01:16:34,221 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,223 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_bb_cmpx`
2021-08-06 01:16:34,223 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,225 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_bb_cmpx_typ`
2021-08-06 01:16:34,225 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,227 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_bb_cmpx_typ_mon_prc`
2021-08-06 01:16:34,227 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,229 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_bb_lv1_regn`
2021-08-06 01:16:34,229 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,230 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_bb_lv2_regn`
2021-08-06 01:16:34,230 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,232 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_bb_lv3_regn`
2021-08-06 01:16:34,232 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,234 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_bb_regn_cmpx_rel`
2021-08-06 01:16:34,234 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,236 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_bus`
2021-08-06 01:16:34,236 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,237 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_deal_dtl`
2021-08-06 01:16:34,237 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,240 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_deal_dtl_bak`
2021-08-06 01:16:34,240 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,243 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_gov_legl_dong`
2021-08-06 01:16:34,243 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,244 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_gov_legl_dong_bak`
2021-08-06 01:16:34,244 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,246 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_jws_deal`
2021-08-06 01:16:34,246 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,248 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_kb_cmpx`
2021-08-06 01:16:34,248 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,251 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_kb_cmpx_typ`
2021-08-06 01:16:34,251 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,253 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_kb_cmpx_typ_mon_prc`
2021-08-06 01:16:34,253 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,255 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_kb_cmpx_typ_now_prc_stat`
2021-08-06 01:16:34,255 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,259 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_kb_nv_cmpx_key_mapp`
2021-08-06 01:16:34,259 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,261 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_kb_nv_regn_key_mapp`
2021-08-06 01:16:34,261 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,262 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_kb_regn`
2021-08-06 01:16:34,262 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,264 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx`
2021-08-06 01:16:34,264 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,268 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_atcl`
2021-08-06 01:16:34,268 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,273 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_atcl_bak`
2021-08-06 01:16:34,273 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,277 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_atcl_tag`
2021-08-06 01:16:34,277 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,278 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_bak`
2021-08-06 01:16:34,278 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,281 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_bus`
2021-08-06 01:16:34,281 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,283 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_img`
2021-08-06 01:16:34,283 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,285 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_rbld`
2021-08-06 01:16:34,285 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,287 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_typ`
2021-08-06 01:16:34,287 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,289 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_typ_img`
2021-08-06 01:16:34,289 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,291 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_typ_mntn_prc`
2021-08-06 01:16:34,291 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,292 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_cmpx_typ_stat`
2021-08-06 01:16:34,293 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,295 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kmig_nv_sale`
2021-08-06 01:16:34,295 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,298 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kred_cmpx`
2021-08-06 01:16:34,298 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,300 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `kred_legl_dong`
2021-08-06 01:16:34,300 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,302 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `sequences`
2021-08-06 01:16:34,302 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,303 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `월별영업`
2021-08-06 01:16:34,303 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,304 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `지역월별hira`
2021-08-06 01:16:34,304 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,306 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `지역월별hira2`
2021-08-06 01:16:34,306 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,308 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `지역코드`
2021-08-06 01:16:34,308 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,309 INFO sqlalchemy.engine.Engine SHOW CREATE TABLE `평가대상hira`
2021-08-06 01:16:34,309 INFO sqlalchemy.engine.Engine [raw sql] {}
2021-08-06 01:16:34,310 INFO sqlalchemy.engine.Engine ROLLBACK
#################TBL_NM#######################
key : TBL_NM
name : TBL_NM
table : kadm_tbl_col
type : VARCHAR(50)
is_literal : False
primary_key : True
_user_defined_nullable : False
nullable : False
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 테이블명
computed : None
identity : None
_creation_order : 556
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8AD798>
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__str__ : <bound method Column.__str__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
references : <bound method Column.references of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
append_foreign_key : <bound method Column.append_foreign_key of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__repr__ : <bound method Column.__repr__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_set_parent : <bound method Column._set_parent of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_on_table_attach : <bound method Column._on_table_attach of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
copy : <bound method Column.copy of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_copy : <bound method Column._copy of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_make_proxy : <bound method Column._make_proxy of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0E08>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0E08>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__dict__ : {'key': 'TBL_NM', 'name': 'TBL_NM', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=50), 'is_literal': False, 'primary_key': True, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '테이블명', 'computed': None, 'identity': None, '_creation_order': 556, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8AD798>, 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0E08>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B91C8>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B91C8>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B91C8>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B91C8>
__lt__ : <bound method ColumnOperators.__lt__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__le__ : <bound method ColumnOperators.__le__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B91C8>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B91C8>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B91C8>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B91C8>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B91C8>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
get_children : <bound method ColumnClause.get_children of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_TBL_NM
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_gen_label : <bound method ColumnClause._gen_label of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
params : <bound method Immutable.params of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_clone : <bound method Immutable._clone of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_copy_internals : <bound method Immutable._copy_internals of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
description : TBL_NM
_key_label : kadm_tbl_col_TBL_NM
_label : kadm_tbl_col_TBL_NM
C:/Users/Ceasar.DESKTOP-AQTREV4/PycharmProjects/rep/61.WorkSpace/Almighty/common/database/testReflect.py:42: SADeprecationWarning: The ColumnElement.anon_label attribute is now private, and the public accessor is deprecated. (deprecated since: 1.4)
  print(attr + " : " + str(getattr(col,attr)))
C:/Users/Ceasar.DESKTOP-AQTREV4/PycharmProjects/rep/61.WorkSpace/Almighty/common/database/testReflect.py:42: SADeprecationWarning: The ColumnElement.anon_key_label attribute is now private, and the public accessor is deprecated. (deprecated since: 1.4)
  print(attr + " : " + str(getattr(col,attr)))
_bind_param : <bound method NamedColumn._bind_param of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_negate : <bound method ColumnElement._negate of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FABB3B8>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
operate : <bound method ColumnElement.operate of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
expression : kadm_tbl_col.TBL_NM
_select_iterable : (Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'),)
base_columns : {Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')}
proxy_set : {Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_proxy_key : TBL_NM
cast : <bound method ColumnElement.cast of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
label : <bound method ColumnElement.label of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_anon_label : <bound method ColumnElement._anon_label of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_anon_name_label : %(-9223371890759255780 TBL_NM)s
_anon_key_label : %(-9223371890759255780 TBL_NM)s
anon_label : %(-9223371890759255780 TBL_NM)s
anon_key_label : %(-9223371890759255780 TBL_NM)s
_dedupe_anon_label : %(-9223371890759255780 TBL_NM_)s
_label_anon_label : %(-9223371890759255780 kadm_tbl_col_TBL_NM)s
_label_anon_key_label : %(-9223371890759255780 kadm_tbl_col_TBL_NM)s
_dedupe_label_anon_label : %(-9223371890759255780 kadm_tbl_col_TBL_NM_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
concat : <bound method ColumnOperators.concat of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
like : <bound method ColumnOperators.like of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
ilike : <bound method ColumnOperators.ilike of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
in_ : <bound method ColumnOperators.in_ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
not_in : <bound method ColumnOperators.not_in of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
notin_ : <bound method ColumnOperators.not_in of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
not_like : <bound method ColumnOperators.not_like of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
notlike : <bound method ColumnOperators.not_like of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
notilike : <bound method ColumnOperators.not_ilike of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
is_ : <bound method ColumnOperators.is_ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
is_not : <bound method ColumnOperators.is_not of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
isnot : <bound method ColumnOperators.is_not of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
startswith : <bound method ColumnOperators.startswith of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
endswith : <bound method ColumnOperators.endswith of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
contains : <bound method ColumnOperators.contains of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
match : <bound method ColumnOperators.match of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
desc : <bound method ColumnOperators.desc of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
asc : <bound method ColumnOperators.asc of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
nullslast : <bound method ColumnOperators.nulls_last of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
collate : <bound method ColumnOperators.collate of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
between : <bound method ColumnOperators.between of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
distinct : <bound method ColumnOperators.distinct of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
any_ : <bound method ColumnOperators.any_ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
all_ : <bound method ColumnOperators.all_ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__add__ : <bound method ColumnOperators.__add__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__div__ : <bound method ColumnOperators.__div__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__and__ : <bound method Operators.__and__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__or__ : <bound method Operators.__or__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__invert__ : <bound method Operators.__invert__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
op : <bound method Operators.op of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
bool_op : <bound method Operators.bool_op of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_replace_params : <bound method ClauseElement._replace_params of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
compare : <bound method ClauseElement.compare of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_ungroup : <bound method ClauseElement._ungroup of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
compile : <bound method ClauseElement.compile of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_compiler : <bound method ClauseElement._compiler of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__bool__ : <bound method ClauseElement.__bool__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################COL_NM#######################
key : COL_NM
name : COL_NM
table : kadm_tbl_col
type : VARCHAR(50)
is_literal : False
primary_key : True
_user_defined_nullable : False
nullable : False
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 컬럼명
computed : None
identity : None
_creation_order : 557
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8AD828>
description : COL_NM
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__str__ : <bound method Column.__str__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
references : <bound method Column.references of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
append_foreign_key : <bound method Column.append_foreign_key of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__repr__ : <bound method Column.__repr__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_set_parent : <bound method Column._set_parent of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_on_table_attach : <bound method Column._on_table_attach of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
copy : <bound method Column.copy of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_copy : <bound method Column._copy of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_make_proxy : <bound method Column._make_proxy of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0348>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0348>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__dict__ : {'key': 'COL_NM', 'name': 'COL_NM', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=50), 'is_literal': False, 'primary_key': True, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '컬럼명', 'computed': None, 'identity': None, '_creation_order': 557, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8AD828>, 'description': 'COL_NM', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0348>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B92C8>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B92C8>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B92C8>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B92C8>
__lt__ : <bound method ColumnOperators.__lt__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__le__ : <bound method ColumnOperators.__le__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B92C8>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B92C8>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B92C8>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B92C8>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B92C8>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
get_children : <bound method ColumnClause.get_children of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_COL_NM
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_gen_label : <bound method ColumnClause._gen_label of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
params : <bound method Immutable.params of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_clone : <bound method Immutable._clone of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_copy_internals : <bound method Immutable._copy_internals of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_key_label : kadm_tbl_col_COL_NM
_label : kadm_tbl_col_COL_NM
_bind_param : <bound method NamedColumn._bind_param of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_negate : <bound method ColumnElement._negate of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FAA5728>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
operate : <bound method ColumnElement.operate of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
expression : kadm_tbl_col.COL_NM
_select_iterable : (Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'),)
base_columns : {Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')}
proxy_set : {Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_proxy_key : COL_NM
cast : <bound method ColumnElement.cast of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
label : <bound method ColumnElement.label of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_anon_label : <bound method ColumnElement._anon_label of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_anon_name_label : %(-9223371890759255764 COL_NM)s
_anon_key_label : %(-9223371890759255764 COL_NM)s
anon_label : %(-9223371890759255764 COL_NM)s
anon_key_label : %(-9223371890759255764 COL_NM)s
_dedupe_anon_label : %(-9223371890759255764 COL_NM_)s
_label_anon_label : %(-9223371890759255764 kadm_tbl_col_COL_NM)s
_label_anon_key_label : %(-9223371890759255764 kadm_tbl_col_COL_NM)s
_dedupe_label_anon_label : %(-9223371890759255764 kadm_tbl_col_COL_NM_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
concat : <bound method ColumnOperators.concat of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
like : <bound method ColumnOperators.like of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
ilike : <bound method ColumnOperators.ilike of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
in_ : <bound method ColumnOperators.in_ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
not_in : <bound method ColumnOperators.not_in of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
notin_ : <bound method ColumnOperators.not_in of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
not_like : <bound method ColumnOperators.not_like of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
notlike : <bound method ColumnOperators.not_like of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
notilike : <bound method ColumnOperators.not_ilike of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
is_ : <bound method ColumnOperators.is_ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
is_not : <bound method ColumnOperators.is_not of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
isnot : <bound method ColumnOperators.is_not of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
startswith : <bound method ColumnOperators.startswith of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
endswith : <bound method ColumnOperators.endswith of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
contains : <bound method ColumnOperators.contains of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
match : <bound method ColumnOperators.match of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
desc : <bound method ColumnOperators.desc of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
asc : <bound method ColumnOperators.asc of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
nullslast : <bound method ColumnOperators.nulls_last of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
collate : <bound method ColumnOperators.collate of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
between : <bound method ColumnOperators.between of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
distinct : <bound method ColumnOperators.distinct of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
any_ : <bound method ColumnOperators.any_ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
all_ : <bound method ColumnOperators.all_ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__add__ : <bound method ColumnOperators.__add__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__div__ : <bound method ColumnOperators.__div__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__and__ : <bound method Operators.__and__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__or__ : <bound method Operators.__or__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__invert__ : <bound method Operators.__invert__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
op : <bound method Operators.op of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
bool_op : <bound method Operators.bool_op of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_replace_params : <bound method ClauseElement._replace_params of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
compare : <bound method ClauseElement.compare of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_ungroup : <bound method ClauseElement._ungroup of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
compile : <bound method ClauseElement.compile of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_compiler : <bound method ClauseElement._compiler of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__bool__ : <bound method ClauseElement.__bool__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################COL_HAN_NM#######################
key : COL_HAN_NM
name : COL_HAN_NM
table : kadm_tbl_col
type : VARCHAR(200)
is_literal : False
primary_key : False
_user_defined_nullable : True
nullable : True
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 컬럼한글명
computed : None
identity : None
_creation_order : 558
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8AD8B8>
description : COL_HAN_NM
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__str__ : <bound method Column.__str__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
references : <bound method Column.references of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
append_foreign_key : <bound method Column.append_foreign_key of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__repr__ : <bound method Column.__repr__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_set_parent : <bound method Column._set_parent of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_on_table_attach : <bound method Column._on_table_attach of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
copy : <bound method Column.copy of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_copy : <bound method Column._copy of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_make_proxy : <bound method Column._make_proxy of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0688>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0688>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__dict__ : {'key': 'COL_HAN_NM', 'name': 'COL_HAN_NM', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=200), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': True, 'nullable': True, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '컬럼한글명', 'computed': None, 'identity': None, '_creation_order': 558, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8AD8B8>, 'description': 'COL_HAN_NM', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0688>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9388>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9388>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9388>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9388>
__lt__ : <bound method ColumnOperators.__lt__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__le__ : <bound method ColumnOperators.__le__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9388>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9388>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9388>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9388>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9388>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
get_children : <bound method ColumnClause.get_children of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_COL_HAN_NM
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_gen_label : <bound method ColumnClause._gen_label of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
params : <bound method Immutable.params of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_clone : <bound method Immutable._clone of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_copy_internals : <bound method Immutable._copy_internals of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_key_label : kadm_tbl_col_COL_HAN_NM
_label : kadm_tbl_col_COL_HAN_NM
_bind_param : <bound method NamedColumn._bind_param of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_negate : <bound method ColumnElement._negate of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FA9F8B8>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
operate : <bound method ColumnElement.operate of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
expression : kadm_tbl_col.COL_HAN_NM
_select_iterable : (Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'),)
base_columns : {Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')}
proxy_set : {Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_proxy_key : COL_HAN_NM
cast : <bound method ColumnElement.cast of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
label : <bound method ColumnElement.label of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_anon_label : <bound method ColumnElement._anon_label of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_anon_name_label : %(-9223371890759255752 COL_HAN_NM)s
_anon_key_label : %(-9223371890759255752 COL_HAN_NM)s
anon_label : %(-9223371890759255752 COL_HAN_NM)s
anon_key_label : %(-9223371890759255752 COL_HAN_NM)s
_dedupe_anon_label : %(-9223371890759255752 COL_HAN_NM_)s
_label_anon_label : %(-9223371890759255752 kadm_tbl_col_COL_HAN_NM)s
_label_anon_key_label : %(-9223371890759255752 kadm_tbl_col_COL_HAN_NM)s
_dedupe_label_anon_label : %(-9223371890759255752 kadm_tbl_col_COL_HAN_NM_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
concat : <bound method ColumnOperators.concat of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
like : <bound method ColumnOperators.like of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
ilike : <bound method ColumnOperators.ilike of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
in_ : <bound method ColumnOperators.in_ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
not_in : <bound method ColumnOperators.not_in of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
notin_ : <bound method ColumnOperators.not_in of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
not_like : <bound method ColumnOperators.not_like of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
notlike : <bound method ColumnOperators.not_like of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
notilike : <bound method ColumnOperators.not_ilike of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
is_ : <bound method ColumnOperators.is_ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
is_not : <bound method ColumnOperators.is_not of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
isnot : <bound method ColumnOperators.is_not of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
startswith : <bound method ColumnOperators.startswith of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
endswith : <bound method ColumnOperators.endswith of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
contains : <bound method ColumnOperators.contains of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
match : <bound method ColumnOperators.match of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
desc : <bound method ColumnOperators.desc of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
asc : <bound method ColumnOperators.asc of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
nullslast : <bound method ColumnOperators.nulls_last of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
collate : <bound method ColumnOperators.collate of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
between : <bound method ColumnOperators.between of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
distinct : <bound method ColumnOperators.distinct of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
any_ : <bound method ColumnOperators.any_ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
all_ : <bound method ColumnOperators.all_ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__add__ : <bound method ColumnOperators.__add__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__div__ : <bound method ColumnOperators.__div__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__and__ : <bound method Operators.__and__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__or__ : <bound method Operators.__or__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__invert__ : <bound method Operators.__invert__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
op : <bound method Operators.op of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
bool_op : <bound method Operators.bool_op of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_replace_params : <bound method ClauseElement._replace_params of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
compare : <bound method ClauseElement.compare of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_ungroup : <bound method ClauseElement._ungroup of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
compile : <bound method ClauseElement.compile of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_compiler : <bound method ClauseElement._compiler of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__bool__ : <bound method ClauseElement.__bool__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################COL_DOMA_CD#######################
key : COL_DOMA_CD
name : COL_DOMA_CD
table : kadm_tbl_col
type : VARCHAR(20)
is_literal : False
primary_key : False
_user_defined_nullable : False
nullable : False
default : None
server_default : DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False)
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 컬럼도메인코드
computed : None
identity : None
_creation_order : 559
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8AD9D8>
description : COL_DOMA_CD
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__str__ : <bound method Column.__str__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
references : <bound method Column.references of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
append_foreign_key : <bound method Column.append_foreign_key of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__repr__ : <bound method Column.__repr__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_set_parent : <bound method Column._set_parent of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_on_table_attach : <bound method Column._on_table_attach of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
copy : <bound method Column.copy of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_copy : <bound method Column._copy of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_make_proxy : <bound method Column._make_proxy of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAADC88>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAADC88>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__dict__ : {'key': 'COL_DOMA_CD', 'name': 'COL_DOMA_CD', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=20), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '컬럼도메인코드', 'computed': None, 'identity': None, '_creation_order': 559, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8AD9D8>, 'description': 'COL_DOMA_CD', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAADC88>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B94C8>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B94C8>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B94C8>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B94C8>
__lt__ : <bound method ColumnOperators.__lt__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__le__ : <bound method ColumnOperators.__le__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B94C8>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B94C8>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B94C8>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B94C8>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B94C8>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
get_children : <bound method ColumnClause.get_children of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_COL_DOMA_CD
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_gen_label : <bound method ColumnClause._gen_label of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
params : <bound method Immutable.params of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_clone : <bound method Immutable._clone of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_copy_internals : <bound method Immutable._copy_internals of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_key_label : kadm_tbl_col_COL_DOMA_CD
_label : kadm_tbl_col_COL_DOMA_CD
_bind_param : <bound method NamedColumn._bind_param of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_negate : <bound method ColumnElement._negate of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FA9F138>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
operate : <bound method ColumnElement.operate of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
expression : kadm_tbl_col.COL_DOMA_CD
_select_iterable : (Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'),)
base_columns : {Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')}
proxy_set : {Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_proxy_key : COL_DOMA_CD
cast : <bound method ColumnElement.cast of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
label : <bound method ColumnElement.label of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_anon_label : <bound method ColumnElement._anon_label of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_anon_name_label : %(-9223371890759255732 COL_DOMA_CD)s
_anon_key_label : %(-9223371890759255732 COL_DOMA_CD)s
anon_label : %(-9223371890759255732 COL_DOMA_CD)s
anon_key_label : %(-9223371890759255732 COL_DOMA_CD)s
_dedupe_anon_label : %(-9223371890759255732 COL_DOMA_CD_)s
_label_anon_label : %(-9223371890759255732 kadm_tbl_col_COL_DOMA_CD)s
_label_anon_key_label : %(-9223371890759255732 kadm_tbl_col_COL_DOMA_CD)s
_dedupe_label_anon_label : %(-9223371890759255732 kadm_tbl_col_COL_DOMA_CD_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
concat : <bound method ColumnOperators.concat of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
like : <bound method ColumnOperators.like of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
ilike : <bound method ColumnOperators.ilike of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
in_ : <bound method ColumnOperators.in_ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
not_in : <bound method ColumnOperators.not_in of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
notin_ : <bound method ColumnOperators.not_in of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
not_like : <bound method ColumnOperators.not_like of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
notlike : <bound method ColumnOperators.not_like of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
notilike : <bound method ColumnOperators.not_ilike of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
is_ : <bound method ColumnOperators.is_ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
is_not : <bound method ColumnOperators.is_not of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
isnot : <bound method ColumnOperators.is_not of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
startswith : <bound method ColumnOperators.startswith of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
endswith : <bound method ColumnOperators.endswith of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
contains : <bound method ColumnOperators.contains of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
match : <bound method ColumnOperators.match of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
desc : <bound method ColumnOperators.desc of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
asc : <bound method ColumnOperators.asc of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
nullslast : <bound method ColumnOperators.nulls_last of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
collate : <bound method ColumnOperators.collate of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
between : <bound method ColumnOperators.between of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
distinct : <bound method ColumnOperators.distinct of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
any_ : <bound method ColumnOperators.any_ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
all_ : <bound method ColumnOperators.all_ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__add__ : <bound method ColumnOperators.__add__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__div__ : <bound method ColumnOperators.__div__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__and__ : <bound method Operators.__and__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__or__ : <bound method Operators.__or__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__invert__ : <bound method Operators.__invert__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
op : <bound method Operators.op of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
bool_op : <bound method Operators.bool_op of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_replace_params : <bound method ClauseElement._replace_params of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
compare : <bound method ClauseElement.compare of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_ungroup : <bound method ClauseElement._ungroup of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
compile : <bound method ClauseElement.compile of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_compiler : <bound method ClauseElement._compiler of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__bool__ : <bound method ClauseElement.__bool__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################COL_DOMA_VAL#######################
key : COL_DOMA_VAL
name : COL_DOMA_VAL
table : kadm_tbl_col
type : VARCHAR(200)
is_literal : False
primary_key : False
_user_defined_nullable : True
nullable : True
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 컬럼도메인값
computed : None
identity : None
_creation_order : 560
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADA68>
description : COL_DOMA_VAL
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__str__ : <bound method Column.__str__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
references : <bound method Column.references of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
append_foreign_key : <bound method Column.append_foreign_key of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__repr__ : <bound method Column.__repr__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_set_parent : <bound method Column._set_parent of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_on_table_attach : <bound method Column._on_table_attach of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
copy : <bound method Column.copy of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_copy : <bound method Column._copy of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_make_proxy : <bound method Column._make_proxy of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA79C8>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA79C8>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__dict__ : {'key': 'COL_DOMA_VAL', 'name': 'COL_DOMA_VAL', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=200), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': True, 'nullable': True, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '컬럼도메인값', 'computed': None, 'identity': None, '_creation_order': 560, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADA68>, 'description': 'COL_DOMA_VAL', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA79C8>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9588>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9588>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9588>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9588>
__lt__ : <bound method ColumnOperators.__lt__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__le__ : <bound method ColumnOperators.__le__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9588>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9588>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9588>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9588>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9588>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
get_children : <bound method ColumnClause.get_children of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_COL_DOMA_VAL
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_gen_label : <bound method ColumnClause._gen_label of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
params : <bound method Immutable.params of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_clone : <bound method Immutable._clone of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_copy_internals : <bound method Immutable._copy_internals of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_key_label : kadm_tbl_col_COL_DOMA_VAL
_label : kadm_tbl_col_COL_DOMA_VAL
_bind_param : <bound method NamedColumn._bind_param of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_negate : <bound method ColumnElement._negate of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FA9C278>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
operate : <bound method ColumnElement.operate of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
expression : kadm_tbl_col.COL_DOMA_VAL
_select_iterable : (Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'),)
base_columns : {Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')}
proxy_set : {Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_proxy_key : COL_DOMA_VAL
cast : <bound method ColumnElement.cast of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
label : <bound method ColumnElement.label of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_anon_label : <bound method ColumnElement._anon_label of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_anon_name_label : %(-9223371890759255720 COL_DOMA_VAL)s
_anon_key_label : %(-9223371890759255720 COL_DOMA_VAL)s
anon_label : %(-9223371890759255720 COL_DOMA_VAL)s
anon_key_label : %(-9223371890759255720 COL_DOMA_VAL)s
_dedupe_anon_label : %(-9223371890759255720 COL_DOMA_VAL_)s
_label_anon_label : %(-9223371890759255720 kadm_tbl_col_COL_DOMA_VAL)s
_label_anon_key_label : %(-9223371890759255720 kadm_tbl_col_COL_DOMA_VAL)s
_dedupe_label_anon_label : %(-9223371890759255720 kadm_tbl_col_COL_DOMA_VAL_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
concat : <bound method ColumnOperators.concat of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
like : <bound method ColumnOperators.like of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
ilike : <bound method ColumnOperators.ilike of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
in_ : <bound method ColumnOperators.in_ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
not_in : <bound method ColumnOperators.not_in of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
notin_ : <bound method ColumnOperators.not_in of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
not_like : <bound method ColumnOperators.not_like of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
notlike : <bound method ColumnOperators.not_like of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
notilike : <bound method ColumnOperators.not_ilike of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
is_ : <bound method ColumnOperators.is_ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
is_not : <bound method ColumnOperators.is_not of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
isnot : <bound method ColumnOperators.is_not of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
startswith : <bound method ColumnOperators.startswith of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
endswith : <bound method ColumnOperators.endswith of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
contains : <bound method ColumnOperators.contains of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
match : <bound method ColumnOperators.match of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
desc : <bound method ColumnOperators.desc of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
asc : <bound method ColumnOperators.asc of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
nullslast : <bound method ColumnOperators.nulls_last of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
collate : <bound method ColumnOperators.collate of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
between : <bound method ColumnOperators.between of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
distinct : <bound method ColumnOperators.distinct of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
any_ : <bound method ColumnOperators.any_ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
all_ : <bound method ColumnOperators.all_ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__add__ : <bound method ColumnOperators.__add__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__div__ : <bound method ColumnOperators.__div__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__and__ : <bound method Operators.__and__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__or__ : <bound method Operators.__or__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__invert__ : <bound method Operators.__invert__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
op : <bound method Operators.op of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
bool_op : <bound method Operators.bool_op of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_replace_params : <bound method ClauseElement._replace_params of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
compare : <bound method ClauseElement.compare of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_ungroup : <bound method ClauseElement._ungroup of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
compile : <bound method ClauseElement.compile of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_compiler : <bound method ClauseElement._compiler of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__bool__ : <bound method ClauseElement.__bool__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################COL_SEQ#######################
key : COL_SEQ
name : COL_SEQ
table : kadm_tbl_col
type : DECIMAL(10, 0)
is_literal : False
primary_key : False
_user_defined_nullable : False
nullable : False
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 컬럼순서
computed : None
identity : None
_creation_order : 561
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADAF8>
description : COL_SEQ
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__str__ : <bound method Column.__str__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
references : <bound method Column.references of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
append_foreign_key : <bound method Column.append_foreign_key of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__repr__ : <bound method Column.__repr__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_set_parent : <bound method Column._set_parent of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_on_table_attach : <bound method Column._on_table_attach of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
copy : <bound method Column.copy of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_copy : <bound method Column._copy of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_make_proxy : <bound method Column._make_proxy of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0388>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0388>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__dict__ : {'key': 'COL_SEQ', 'name': 'COL_SEQ', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': DECIMAL(precision=10, scale=0), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '컬럼순서', 'computed': None, 'identity': None, '_creation_order': 561, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADAF8>, 'description': 'COL_SEQ', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0388>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9648>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9648>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9648>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9648>
__lt__ : <bound method ColumnOperators.__lt__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__le__ : <bound method ColumnOperators.__le__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9648>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9648>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9648>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9648>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9648>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
get_children : <bound method ColumnClause.get_children of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_COL_SEQ
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_gen_label : <bound method ColumnClause._gen_label of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
params : <bound method Immutable.params of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_clone : <bound method Immutable._clone of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_copy_internals : <bound method Immutable._copy_internals of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_key_label : kadm_tbl_col_COL_SEQ
_label : kadm_tbl_col_COL_SEQ
_bind_param : <bound method NamedColumn._bind_param of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_negate : <bound method ColumnElement._negate of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
comparator : <sqlalchemy.sql.sqltypes._LookupExpressionAdapter.Comparator object at 0x000002203FA982C8>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
operate : <bound method ColumnElement.operate of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
expression : kadm_tbl_col.COL_SEQ
_select_iterable : (Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'),)
base_columns : {Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')}
proxy_set : {Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_proxy_key : COL_SEQ
cast : <bound method ColumnElement.cast of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
label : <bound method ColumnElement.label of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_anon_label : <bound method ColumnElement._anon_label of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_anon_name_label : %(-9223371890759255708 COL_SEQ)s
_anon_key_label : %(-9223371890759255708 COL_SEQ)s
anon_label : %(-9223371890759255708 COL_SEQ)s
anon_key_label : %(-9223371890759255708 COL_SEQ)s
_dedupe_anon_label : %(-9223371890759255708 COL_SEQ_)s
_label_anon_label : %(-9223371890759255708 kadm_tbl_col_COL_SEQ)s
_label_anon_key_label : %(-9223371890759255708 kadm_tbl_col_COL_SEQ)s
_dedupe_label_anon_label : %(-9223371890759255708 kadm_tbl_col_COL_SEQ_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
concat : <bound method ColumnOperators.concat of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
like : <bound method ColumnOperators.like of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
ilike : <bound method ColumnOperators.ilike of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
in_ : <bound method ColumnOperators.in_ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
not_in : <bound method ColumnOperators.not_in of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
notin_ : <bound method ColumnOperators.not_in of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
not_like : <bound method ColumnOperators.not_like of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
notlike : <bound method ColumnOperators.not_like of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
notilike : <bound method ColumnOperators.not_ilike of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
is_ : <bound method ColumnOperators.is_ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
is_not : <bound method ColumnOperators.is_not of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
isnot : <bound method ColumnOperators.is_not of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
startswith : <bound method ColumnOperators.startswith of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
endswith : <bound method ColumnOperators.endswith of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
contains : <bound method ColumnOperators.contains of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
match : <bound method ColumnOperators.match of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
desc : <bound method ColumnOperators.desc of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
asc : <bound method ColumnOperators.asc of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
nullslast : <bound method ColumnOperators.nulls_last of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
collate : <bound method ColumnOperators.collate of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
between : <bound method ColumnOperators.between of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
distinct : <bound method ColumnOperators.distinct of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
any_ : <bound method ColumnOperators.any_ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
all_ : <bound method ColumnOperators.all_ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__add__ : <bound method ColumnOperators.__add__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__div__ : <bound method ColumnOperators.__div__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__and__ : <bound method Operators.__and__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__or__ : <bound method Operators.__or__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__invert__ : <bound method Operators.__invert__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
op : <bound method Operators.op of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
bool_op : <bound method Operators.bool_op of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_replace_params : <bound method ClauseElement._replace_params of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
compare : <bound method ClauseElement.compare of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_ungroup : <bound method ClauseElement._ungroup of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
compile : <bound method ClauseElement.compile of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_compiler : <bound method ClauseElement._compiler of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__bool__ : <bound method ClauseElement.__bool__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################PANT_TBL_NM#######################
key : PANT_TBL_NM
name : PANT_TBL_NM
table : kadm_tbl_col
type : VARCHAR(50)
is_literal : False
primary_key : False
_user_defined_nullable : True
nullable : True
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 부모테이블명
computed : None
identity : None
_creation_order : 562
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADB88>
description : PANT_TBL_NM
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__str__ : <bound method Column.__str__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
references : <bound method Column.references of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
append_foreign_key : <bound method Column.append_foreign_key of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__repr__ : <bound method Column.__repr__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_set_parent : <bound method Column._set_parent of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_on_table_attach : <bound method Column._on_table_attach of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
copy : <bound method Column.copy of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_copy : <bound method Column._copy of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_make_proxy : <bound method Column._make_proxy of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0248>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0248>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__dict__ : {'key': 'PANT_TBL_NM', 'name': 'PANT_TBL_NM', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=50), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': True, 'nullable': True, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '부모테이블명', 'computed': None, 'identity': None, '_creation_order': 562, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADB88>, 'description': 'PANT_TBL_NM', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAB0248>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9788>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9788>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9788>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9788>
__lt__ : <bound method ColumnOperators.__lt__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__le__ : <bound method ColumnOperators.__le__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9788>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9788>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9788>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9788>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9788>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
get_children : <bound method ColumnClause.get_children of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_PANT_TBL_NM
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_gen_label : <bound method ColumnClause._gen_label of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
params : <bound method Immutable.params of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_clone : <bound method Immutable._clone of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_copy_internals : <bound method Immutable._copy_internals of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_key_label : kadm_tbl_col_PANT_TBL_NM
_label : kadm_tbl_col_PANT_TBL_NM
_bind_param : <bound method NamedColumn._bind_param of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_negate : <bound method ColumnElement._negate of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FA914F8>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
operate : <bound method ColumnElement.operate of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
expression : kadm_tbl_col.PANT_TBL_NM
_select_iterable : (Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'),)
base_columns : {Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')}
proxy_set : {Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_proxy_key : PANT_TBL_NM
cast : <bound method ColumnElement.cast of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
label : <bound method ColumnElement.label of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_anon_label : <bound method ColumnElement._anon_label of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_anon_name_label : %(-9223371890759255688 PANT_TBL_NM)s
_anon_key_label : %(-9223371890759255688 PANT_TBL_NM)s
anon_label : %(-9223371890759255688 PANT_TBL_NM)s
anon_key_label : %(-9223371890759255688 PANT_TBL_NM)s
_dedupe_anon_label : %(-9223371890759255688 PANT_TBL_NM_)s
_label_anon_label : %(-9223371890759255688 kadm_tbl_col_PANT_TBL_NM)s
_label_anon_key_label : %(-9223371890759255688 kadm_tbl_col_PANT_TBL_NM)s
_dedupe_label_anon_label : %(-9223371890759255688 kadm_tbl_col_PANT_TBL_NM_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
concat : <bound method ColumnOperators.concat of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
like : <bound method ColumnOperators.like of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
ilike : <bound method ColumnOperators.ilike of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
in_ : <bound method ColumnOperators.in_ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
not_in : <bound method ColumnOperators.not_in of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
notin_ : <bound method ColumnOperators.not_in of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
not_like : <bound method ColumnOperators.not_like of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
notlike : <bound method ColumnOperators.not_like of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
notilike : <bound method ColumnOperators.not_ilike of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
is_ : <bound method ColumnOperators.is_ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
is_not : <bound method ColumnOperators.is_not of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
isnot : <bound method ColumnOperators.is_not of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
startswith : <bound method ColumnOperators.startswith of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
endswith : <bound method ColumnOperators.endswith of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
contains : <bound method ColumnOperators.contains of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
match : <bound method ColumnOperators.match of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
desc : <bound method ColumnOperators.desc of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
asc : <bound method ColumnOperators.asc of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
nullslast : <bound method ColumnOperators.nulls_last of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
collate : <bound method ColumnOperators.collate of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
between : <bound method ColumnOperators.between of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
distinct : <bound method ColumnOperators.distinct of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
any_ : <bound method ColumnOperators.any_ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
all_ : <bound method ColumnOperators.all_ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__add__ : <bound method ColumnOperators.__add__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__div__ : <bound method ColumnOperators.__div__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__and__ : <bound method Operators.__and__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__or__ : <bound method Operators.__or__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__invert__ : <bound method Operators.__invert__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
op : <bound method Operators.op of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
bool_op : <bound method Operators.bool_op of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_replace_params : <bound method ClauseElement._replace_params of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
compare : <bound method ClauseElement.compare of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_ungroup : <bound method ClauseElement._ungroup of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
compile : <bound method ClauseElement.compile of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_compiler : <bound method ClauseElement._compiler of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__bool__ : <bound method ClauseElement.__bool__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################PANT_COL_NM#######################
key : PANT_COL_NM
name : PANT_COL_NM
table : kadm_tbl_col
type : VARCHAR(50)
is_literal : False
primary_key : False
_user_defined_nullable : True
nullable : True
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 부모컬럼명
computed : None
identity : None
_creation_order : 563
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADC18>
description : PANT_COL_NM
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__str__ : <bound method Column.__str__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
references : <bound method Column.references of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
append_foreign_key : <bound method Column.append_foreign_key of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__repr__ : <bound method Column.__repr__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_set_parent : <bound method Column._set_parent of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_on_table_attach : <bound method Column._on_table_attach of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
copy : <bound method Column.copy of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_copy : <bound method Column._copy of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_make_proxy : <bound method Column._make_proxy of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0688>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0688>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__dict__ : {'key': 'PANT_COL_NM', 'name': 'PANT_COL_NM', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=50), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': True, 'nullable': True, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '부모컬럼명', 'computed': None, 'identity': None, '_creation_order': 563, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADC18>, 'description': 'PANT_COL_NM', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0688>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9848>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9848>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9848>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9848>
__lt__ : <bound method ColumnOperators.__lt__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__le__ : <bound method ColumnOperators.__le__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9848>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9848>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9848>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9848>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9848>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
get_children : <bound method ColumnClause.get_children of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_PANT_COL_NM
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_gen_label : <bound method ColumnClause._gen_label of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
params : <bound method Immutable.params of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_clone : <bound method Immutable._clone of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_copy_internals : <bound method Immutable._copy_internals of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_key_label : kadm_tbl_col_PANT_COL_NM
_label : kadm_tbl_col_PANT_COL_NM
_bind_param : <bound method NamedColumn._bind_param of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_negate : <bound method ColumnElement._negate of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FA91B38>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
operate : <bound method ColumnElement.operate of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
expression : kadm_tbl_col.PANT_COL_NM
_select_iterable : (Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'),)
base_columns : {Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')}
proxy_set : {Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_proxy_key : PANT_COL_NM
cast : <bound method ColumnElement.cast of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
label : <bound method ColumnElement.label of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_anon_label : <bound method ColumnElement._anon_label of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_anon_name_label : %(-9223371890759255676 PANT_COL_NM)s
_anon_key_label : %(-9223371890759255676 PANT_COL_NM)s
anon_label : %(-9223371890759255676 PANT_COL_NM)s
anon_key_label : %(-9223371890759255676 PANT_COL_NM)s
_dedupe_anon_label : %(-9223371890759255676 PANT_COL_NM_)s
_label_anon_label : %(-9223371890759255676 kadm_tbl_col_PANT_COL_NM)s
_label_anon_key_label : %(-9223371890759255676 kadm_tbl_col_PANT_COL_NM)s
_dedupe_label_anon_label : %(-9223371890759255676 kadm_tbl_col_PANT_COL_NM_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
concat : <bound method ColumnOperators.concat of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
like : <bound method ColumnOperators.like of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
ilike : <bound method ColumnOperators.ilike of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
in_ : <bound method ColumnOperators.in_ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
not_in : <bound method ColumnOperators.not_in of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
notin_ : <bound method ColumnOperators.not_in of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
not_like : <bound method ColumnOperators.not_like of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
notlike : <bound method ColumnOperators.not_like of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
notilike : <bound method ColumnOperators.not_ilike of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
is_ : <bound method ColumnOperators.is_ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
is_not : <bound method ColumnOperators.is_not of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
isnot : <bound method ColumnOperators.is_not of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
startswith : <bound method ColumnOperators.startswith of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
endswith : <bound method ColumnOperators.endswith of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
contains : <bound method ColumnOperators.contains of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
match : <bound method ColumnOperators.match of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
desc : <bound method ColumnOperators.desc of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
asc : <bound method ColumnOperators.asc of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
nullslast : <bound method ColumnOperators.nulls_last of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
collate : <bound method ColumnOperators.collate of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
between : <bound method ColumnOperators.between of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
distinct : <bound method ColumnOperators.distinct of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
any_ : <bound method ColumnOperators.any_ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
all_ : <bound method ColumnOperators.all_ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__add__ : <bound method ColumnOperators.__add__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__div__ : <bound method ColumnOperators.__div__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__and__ : <bound method Operators.__and__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__or__ : <bound method Operators.__or__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__invert__ : <bound method Operators.__invert__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
op : <bound method Operators.op of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
bool_op : <bound method Operators.bool_op of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_replace_params : <bound method ClauseElement._replace_params of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
compare : <bound method ClauseElement.compare of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_ungroup : <bound method ClauseElement._ungroup of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
compile : <bound method ClauseElement.compile of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_compiler : <bound method ClauseElement._compiler of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__bool__ : <bound method ClauseElement.__bool__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################PK_YN#######################
key : PK_YN
name : PK_YN
table : kadm_tbl_col
type : VARCHAR(1)
is_literal : False
primary_key : False
_user_defined_nullable : False
nullable : False
default : None
server_default : DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False)
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : PK여부
computed : None
identity : None
_creation_order : 564
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADD38>
description : PK_YN
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__str__ : <bound method Column.__str__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
references : <bound method Column.references of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
append_foreign_key : <bound method Column.append_foreign_key of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__repr__ : <bound method Column.__repr__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_set_parent : <bound method Column._set_parent of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_on_table_attach : <bound method Column._on_table_attach of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
copy : <bound method Column.copy of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_copy : <bound method Column._copy of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_make_proxy : <bound method Column._make_proxy of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9EA48>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9EA48>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__dict__ : {'key': 'PK_YN', 'name': 'PK_YN', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=1), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': 'PK여부', 'computed': None, 'identity': None, '_creation_order': 564, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADD38>, 'description': 'PK_YN', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9EA48>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9A08>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9A08>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9A08>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9A08>
__lt__ : <bound method ColumnOperators.__lt__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__le__ : <bound method ColumnOperators.__le__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9A08>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9A08>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9A08>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9A08>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9A08>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
get_children : <bound method ColumnClause.get_children of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_PK_YN
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_gen_label : <bound method ColumnClause._gen_label of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
params : <bound method Immutable.params of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_clone : <bound method Immutable._clone of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_copy_internals : <bound method Immutable._copy_internals of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_key_label : kadm_tbl_col_PK_YN
_label : kadm_tbl_col_PK_YN
_bind_param : <bound method NamedColumn._bind_param of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_negate : <bound method ColumnElement._negate of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FA8F098>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
operate : <bound method ColumnElement.operate of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
expression : kadm_tbl_col.PK_YN
_select_iterable : (Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'),)
base_columns : {Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')}
proxy_set : {Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_proxy_key : PK_YN
cast : <bound method ColumnElement.cast of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
label : <bound method ColumnElement.label of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_anon_label : <bound method ColumnElement._anon_label of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_anon_name_label : %(-9223371890759255648 PK_YN)s
_anon_key_label : %(-9223371890759255648 PK_YN)s
anon_label : %(-9223371890759255648 PK_YN)s
anon_key_label : %(-9223371890759255648 PK_YN)s
_dedupe_anon_label : %(-9223371890759255648 PK_YN_)s
_label_anon_label : %(-9223371890759255648 kadm_tbl_col_PK_YN)s
_label_anon_key_label : %(-9223371890759255648 kadm_tbl_col_PK_YN)s
_dedupe_label_anon_label : %(-9223371890759255648 kadm_tbl_col_PK_YN_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
concat : <bound method ColumnOperators.concat of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
like : <bound method ColumnOperators.like of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
ilike : <bound method ColumnOperators.ilike of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
in_ : <bound method ColumnOperators.in_ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
not_in : <bound method ColumnOperators.not_in of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
notin_ : <bound method ColumnOperators.not_in of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
not_like : <bound method ColumnOperators.not_like of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
notlike : <bound method ColumnOperators.not_like of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
notilike : <bound method ColumnOperators.not_ilike of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
is_ : <bound method ColumnOperators.is_ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
is_not : <bound method ColumnOperators.is_not of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
isnot : <bound method ColumnOperators.is_not of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
startswith : <bound method ColumnOperators.startswith of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
endswith : <bound method ColumnOperators.endswith of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
contains : <bound method ColumnOperators.contains of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
match : <bound method ColumnOperators.match of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
desc : <bound method ColumnOperators.desc of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
asc : <bound method ColumnOperators.asc of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
nullslast : <bound method ColumnOperators.nulls_last of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
collate : <bound method ColumnOperators.collate of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
between : <bound method ColumnOperators.between of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
distinct : <bound method ColumnOperators.distinct of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
any_ : <bound method ColumnOperators.any_ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
all_ : <bound method ColumnOperators.all_ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__add__ : <bound method ColumnOperators.__add__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__div__ : <bound method ColumnOperators.__div__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__and__ : <bound method Operators.__and__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__or__ : <bound method Operators.__or__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__invert__ : <bound method Operators.__invert__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
op : <bound method Operators.op of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
bool_op : <bound method Operators.bool_op of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_replace_params : <bound method ClauseElement._replace_params of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
compare : <bound method ClauseElement.compare of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_ungroup : <bound method ClauseElement._ungroup of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
compile : <bound method ClauseElement.compile of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_compiler : <bound method ClauseElement._compiler of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__bool__ : <bound method ClauseElement.__bool__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################BAS_VAL#######################
key : BAS_VAL
name : BAS_VAL
table : kadm_tbl_col
type : VARCHAR(200)
is_literal : False
primary_key : False
_user_defined_nullable : True
nullable : True
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 기본값
computed : None
identity : None
_creation_order : 565
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADDC8>
description : BAS_VAL
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__str__ : <bound method Column.__str__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
references : <bound method Column.references of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
append_foreign_key : <bound method Column.append_foreign_key of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__repr__ : <bound method Column.__repr__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_set_parent : <bound method Column._set_parent of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_on_table_attach : <bound method Column._on_table_attach of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
copy : <bound method Column.copy of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_copy : <bound method Column._copy of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_make_proxy : <bound method Column._make_proxy of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAAD588>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAAD588>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__dict__ : {'key': 'BAS_VAL', 'name': 'BAS_VAL', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=200), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': True, 'nullable': True, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '기본값', 'computed': None, 'identity': None, '_creation_order': 565, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADDC8>, 'description': 'BAS_VAL', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAAD588>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9688>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9688>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9688>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9688>
__lt__ : <bound method ColumnOperators.__lt__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__le__ : <bound method ColumnOperators.__le__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9688>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9688>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9688>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9688>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9688>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
get_children : <bound method ColumnClause.get_children of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_BAS_VAL
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_gen_label : <bound method ColumnClause._gen_label of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
params : <bound method Immutable.params of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_clone : <bound method Immutable._clone of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_copy_internals : <bound method Immutable._copy_internals of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_key_label : kadm_tbl_col_BAS_VAL
_label : kadm_tbl_col_BAS_VAL
_bind_param : <bound method NamedColumn._bind_param of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_negate : <bound method ColumnElement._negate of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FA83DB8>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
operate : <bound method ColumnElement.operate of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
expression : kadm_tbl_col.BAS_VAL
_select_iterable : (Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'),)
base_columns : {Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')}
proxy_set : {Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_proxy_key : BAS_VAL
cast : <bound method ColumnElement.cast of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
label : <bound method ColumnElement.label of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_anon_label : <bound method ColumnElement._anon_label of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_anon_name_label : %(-9223371890759255704 BAS_VAL)s
_anon_key_label : %(-9223371890759255704 BAS_VAL)s
anon_label : %(-9223371890759255704 BAS_VAL)s
anon_key_label : %(-9223371890759255704 BAS_VAL)s
_dedupe_anon_label : %(-9223371890759255704 BAS_VAL_)s
_label_anon_label : %(-9223371890759255704 kadm_tbl_col_BAS_VAL)s
_label_anon_key_label : %(-9223371890759255704 kadm_tbl_col_BAS_VAL)s
_dedupe_label_anon_label : %(-9223371890759255704 kadm_tbl_col_BAS_VAL_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
concat : <bound method ColumnOperators.concat of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
like : <bound method ColumnOperators.like of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
ilike : <bound method ColumnOperators.ilike of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
in_ : <bound method ColumnOperators.in_ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
not_in : <bound method ColumnOperators.not_in of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
notin_ : <bound method ColumnOperators.not_in of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
not_like : <bound method ColumnOperators.not_like of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
notlike : <bound method ColumnOperators.not_like of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
notilike : <bound method ColumnOperators.not_ilike of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
is_ : <bound method ColumnOperators.is_ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
is_not : <bound method ColumnOperators.is_not of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
isnot : <bound method ColumnOperators.is_not of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
startswith : <bound method ColumnOperators.startswith of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
endswith : <bound method ColumnOperators.endswith of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
contains : <bound method ColumnOperators.contains of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
match : <bound method ColumnOperators.match of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
desc : <bound method ColumnOperators.desc of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
asc : <bound method ColumnOperators.asc of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
nullslast : <bound method ColumnOperators.nulls_last of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
collate : <bound method ColumnOperators.collate of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
between : <bound method ColumnOperators.between of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
distinct : <bound method ColumnOperators.distinct of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
any_ : <bound method ColumnOperators.any_ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
all_ : <bound method ColumnOperators.all_ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__add__ : <bound method ColumnOperators.__add__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__div__ : <bound method ColumnOperators.__div__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__and__ : <bound method Operators.__and__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__or__ : <bound method Operators.__or__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__invert__ : <bound method Operators.__invert__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
op : <bound method Operators.op of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
bool_op : <bound method Operators.bool_op of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_replace_params : <bound method ClauseElement._replace_params of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
compare : <bound method ClauseElement.compare of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_ungroup : <bound method ClauseElement._ungroup of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
compile : <bound method ClauseElement.compile of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_compiler : <bound method ClauseElement._compiler of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__bool__ : <bound method ClauseElement.__bool__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################COL_DESC#######################
key : COL_DESC
name : COL_DESC
table : kadm_tbl_col
type : VARCHAR(500)
is_literal : False
primary_key : False
_user_defined_nullable : True
nullable : True
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 컬럼설명
computed : None
identity : None
_creation_order : 566
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADE58>
description : COL_DESC
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__str__ : <bound method Column.__str__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
references : <bound method Column.references of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
append_foreign_key : <bound method Column.append_foreign_key of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__repr__ : <bound method Column.__repr__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_set_parent : <bound method Column._set_parent of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_on_table_attach : <bound method Column._on_table_attach of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
copy : <bound method Column.copy of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_copy : <bound method Column._copy of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_make_proxy : <bound method Column._make_proxy of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA07C8>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA07C8>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__dict__ : {'key': 'COL_DESC', 'name': 'COL_DESC', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': VARCHAR(length=500), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': True, 'nullable': True, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '컬럼설명', 'computed': None, 'identity': None, '_creation_order': 566, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADE58>, 'description': 'COL_DESC', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA07C8>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9B88>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9B88>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9B88>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9B88>
__lt__ : <bound method ColumnOperators.__lt__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__le__ : <bound method ColumnOperators.__le__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9B88>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9B88>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9B88>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9B88>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9B88>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
get_children : <bound method ColumnClause.get_children of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_COL_DESC
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_gen_label : <bound method ColumnClause._gen_label of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
params : <bound method Immutable.params of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_clone : <bound method Immutable._clone of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_copy_internals : <bound method Immutable._copy_internals of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_key_label : kadm_tbl_col_COL_DESC
_label : kadm_tbl_col_COL_DESC
_bind_param : <bound method NamedColumn._bind_param of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_negate : <bound method ColumnElement._negate of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
comparator : <sqlalchemy.sql.sqltypes.Concatenable.Comparator object at 0x000002203FA85458>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
operate : <bound method ColumnElement.operate of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
expression : kadm_tbl_col.COL_DESC
_select_iterable : (Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'),)
base_columns : {Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')}
proxy_set : {Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_proxy_key : COL_DESC
cast : <bound method ColumnElement.cast of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
label : <bound method ColumnElement.label of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_anon_label : <bound method ColumnElement._anon_label of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_anon_name_label : %(-9223371890759255624 COL_DESC)s
_anon_key_label : %(-9223371890759255624 COL_DESC)s
anon_label : %(-9223371890759255624 COL_DESC)s
anon_key_label : %(-9223371890759255624 COL_DESC)s
_dedupe_anon_label : %(-9223371890759255624 COL_DESC_)s
_label_anon_label : %(-9223371890759255624 kadm_tbl_col_COL_DESC)s
_label_anon_key_label : %(-9223371890759255624 kadm_tbl_col_COL_DESC)s
_dedupe_label_anon_label : %(-9223371890759255624 kadm_tbl_col_COL_DESC_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
concat : <bound method ColumnOperators.concat of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
like : <bound method ColumnOperators.like of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
ilike : <bound method ColumnOperators.ilike of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
in_ : <bound method ColumnOperators.in_ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
not_in : <bound method ColumnOperators.not_in of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
notin_ : <bound method ColumnOperators.not_in of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
not_like : <bound method ColumnOperators.not_like of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
notlike : <bound method ColumnOperators.not_like of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
notilike : <bound method ColumnOperators.not_ilike of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
is_ : <bound method ColumnOperators.is_ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
is_not : <bound method ColumnOperators.is_not of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
isnot : <bound method ColumnOperators.is_not of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
startswith : <bound method ColumnOperators.startswith of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
endswith : <bound method ColumnOperators.endswith of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
contains : <bound method ColumnOperators.contains of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
match : <bound method ColumnOperators.match of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
desc : <bound method ColumnOperators.desc of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
asc : <bound method ColumnOperators.asc of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
nullslast : <bound method ColumnOperators.nulls_last of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
collate : <bound method ColumnOperators.collate of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
between : <bound method ColumnOperators.between of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
distinct : <bound method ColumnOperators.distinct of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
any_ : <bound method ColumnOperators.any_ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
all_ : <bound method ColumnOperators.all_ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__add__ : <bound method ColumnOperators.__add__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__div__ : <bound method ColumnOperators.__div__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__and__ : <bound method Operators.__and__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__or__ : <bound method Operators.__or__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__invert__ : <bound method Operators.__invert__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
op : <bound method Operators.op of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
bool_op : <bound method Operators.bool_op of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_replace_params : <bound method ClauseElement._replace_params of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
compare : <bound method ClauseElement.compare of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_ungroup : <bound method ClauseElement._ungroup of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
compile : <bound method ClauseElement.compile of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_compiler : <bound method ClauseElement._compiler of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__bool__ : <bound method ClauseElement.__bool__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################REG_USER_ID#######################
key : REG_USER_ID
name : REG_USER_ID
table : kadm_tbl_col
type : DECIMAL(10, 0)
is_literal : False
primary_key : False
_user_defined_nullable : False
nullable : False
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 등록자ID
computed : None
identity : None
_creation_order : 567
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADEE8>
description : REG_USER_ID
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__str__ : <bound method Column.__str__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
references : <bound method Column.references of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
append_foreign_key : <bound method Column.append_foreign_key of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__repr__ : <bound method Column.__repr__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_set_parent : <bound method Column._set_parent of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_on_table_attach : <bound method Column._on_table_attach of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
copy : <bound method Column.copy of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_copy : <bound method Column._copy of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_make_proxy : <bound method Column._make_proxy of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9EF88>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9EF88>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__dict__ : {'key': 'REG_USER_ID', 'name': 'REG_USER_ID', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': DECIMAL(precision=10, scale=0), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '등록자ID', 'computed': None, 'identity': None, '_creation_order': 567, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADEE8>, 'description': 'REG_USER_ID', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9EF88>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9CC8>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9CC8>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9CC8>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9CC8>
__lt__ : <bound method ColumnOperators.__lt__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__le__ : <bound method ColumnOperators.__le__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9CC8>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9CC8>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9CC8>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9CC8>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9CC8>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
get_children : <bound method ColumnClause.get_children of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_REG_USER_ID
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_gen_label : <bound method ColumnClause._gen_label of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
params : <bound method Immutable.params of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_clone : <bound method Immutable._clone of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_copy_internals : <bound method Immutable._copy_internals of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_key_label : kadm_tbl_col_REG_USER_ID
_label : kadm_tbl_col_REG_USER_ID
_bind_param : <bound method NamedColumn._bind_param of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_negate : <bound method ColumnElement._negate of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
comparator : <sqlalchemy.sql.sqltypes._LookupExpressionAdapter.Comparator object at 0x000002203FA858B8>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
operate : <bound method ColumnElement.operate of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
expression : kadm_tbl_col.REG_USER_ID
_select_iterable : (Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'),)
base_columns : {Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')}
proxy_set : {Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_proxy_key : REG_USER_ID
cast : <bound method ColumnElement.cast of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
label : <bound method ColumnElement.label of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_anon_label : <bound method ColumnElement._anon_label of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_anon_name_label : %(-9223371890759255604 REG_USER_ID)s
_anon_key_label : %(-9223371890759255604 REG_USER_ID)s
anon_label : %(-9223371890759255604 REG_USER_ID)s
anon_key_label : %(-9223371890759255604 REG_USER_ID)s
_dedupe_anon_label : %(-9223371890759255604 REG_USER_ID_)s
_label_anon_label : %(-9223371890759255604 kadm_tbl_col_REG_USER_ID)s
_label_anon_key_label : %(-9223371890759255604 kadm_tbl_col_REG_USER_ID)s
_dedupe_label_anon_label : %(-9223371890759255604 kadm_tbl_col_REG_USER_ID_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
concat : <bound method ColumnOperators.concat of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
like : <bound method ColumnOperators.like of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
ilike : <bound method ColumnOperators.ilike of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
in_ : <bound method ColumnOperators.in_ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
not_in : <bound method ColumnOperators.not_in of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
notin_ : <bound method ColumnOperators.not_in of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
not_like : <bound method ColumnOperators.not_like of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
notlike : <bound method ColumnOperators.not_like of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
notilike : <bound method ColumnOperators.not_ilike of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
is_ : <bound method ColumnOperators.is_ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
is_not : <bound method ColumnOperators.is_not of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
isnot : <bound method ColumnOperators.is_not of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
startswith : <bound method ColumnOperators.startswith of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
endswith : <bound method ColumnOperators.endswith of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
contains : <bound method ColumnOperators.contains of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
match : <bound method ColumnOperators.match of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
desc : <bound method ColumnOperators.desc of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
asc : <bound method ColumnOperators.asc of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
nullslast : <bound method ColumnOperators.nulls_last of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
collate : <bound method ColumnOperators.collate of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
between : <bound method ColumnOperators.between of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
distinct : <bound method ColumnOperators.distinct of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
any_ : <bound method ColumnOperators.any_ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
all_ : <bound method ColumnOperators.all_ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__add__ : <bound method ColumnOperators.__add__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__div__ : <bound method ColumnOperators.__div__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__and__ : <bound method Operators.__and__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__or__ : <bound method Operators.__or__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__invert__ : <bound method Operators.__invert__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
op : <bound method Operators.op of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
bool_op : <bound method Operators.bool_op of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_replace_params : <bound method ClauseElement._replace_params of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
compare : <bound method ClauseElement.compare of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_ungroup : <bound method ClauseElement._ungroup of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
compile : <bound method ClauseElement.compile of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_compiler : <bound method ClauseElement._compiler of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__bool__ : <bound method ClauseElement.__bool__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################REG_DTM#######################
key : REG_DTM
name : REG_DTM
table : kadm_tbl_col
type : DATETIME
is_literal : False
primary_key : False
_user_defined_nullable : False
nullable : False
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 등록일시
computed : None
identity : None
_creation_order : 568
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADF78>
description : REG_DTM
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__str__ : <bound method Column.__str__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
references : <bound method Column.references of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
append_foreign_key : <bound method Column.append_foreign_key of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__repr__ : <bound method Column.__repr__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_set_parent : <bound method Column._set_parent of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_on_table_attach : <bound method Column._on_table_attach of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
copy : <bound method Column.copy of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_copy : <bound method Column._copy of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_make_proxy : <bound method Column._make_proxy of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9B7C8>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9B7C8>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__dict__ : {'key': 'REG_DTM', 'name': 'REG_DTM', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': DATETIME(), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '등록일시', 'computed': None, 'identity': None, '_creation_order': 568, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8ADF78>, 'description': 'REG_DTM', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9B7C8>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9DC8>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9DC8>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9DC8>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9DC8>
__lt__ : <bound method ColumnOperators.__lt__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__le__ : <bound method ColumnOperators.__le__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9DC8>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9DC8>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9DC8>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9DC8>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9DC8>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
get_children : <bound method ColumnClause.get_children of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_REG_DTM
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_gen_label : <bound method ColumnClause._gen_label of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
params : <bound method Immutable.params of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_clone : <bound method Immutable._clone of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_copy_internals : <bound method Immutable._copy_internals of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_key_label : kadm_tbl_col_REG_DTM
_label : kadm_tbl_col_REG_DTM
_bind_param : <bound method NamedColumn._bind_param of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_negate : <bound method ColumnElement._negate of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
comparator : <sqlalchemy.sql.sqltypes._LookupExpressionAdapter.Comparator object at 0x000002203FA79048>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
operate : <bound method ColumnElement.operate of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
expression : kadm_tbl_col.REG_DTM
_select_iterable : (Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'),)
base_columns : {Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')}
proxy_set : {Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_proxy_key : REG_DTM
cast : <bound method ColumnElement.cast of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
label : <bound method ColumnElement.label of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_anon_label : <bound method ColumnElement._anon_label of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_anon_name_label : %(-9223371890759255588 REG_DTM)s
_anon_key_label : %(-9223371890759255588 REG_DTM)s
anon_label : %(-9223371890759255588 REG_DTM)s
anon_key_label : %(-9223371890759255588 REG_DTM)s
_dedupe_anon_label : %(-9223371890759255588 REG_DTM_)s
_label_anon_label : %(-9223371890759255588 kadm_tbl_col_REG_DTM)s
_label_anon_key_label : %(-9223371890759255588 kadm_tbl_col_REG_DTM)s
_dedupe_label_anon_label : %(-9223371890759255588 kadm_tbl_col_REG_DTM_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
concat : <bound method ColumnOperators.concat of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
like : <bound method ColumnOperators.like of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
ilike : <bound method ColumnOperators.ilike of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
in_ : <bound method ColumnOperators.in_ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
not_in : <bound method ColumnOperators.not_in of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
notin_ : <bound method ColumnOperators.not_in of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
not_like : <bound method ColumnOperators.not_like of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
notlike : <bound method ColumnOperators.not_like of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
notilike : <bound method ColumnOperators.not_ilike of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
is_ : <bound method ColumnOperators.is_ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
is_not : <bound method ColumnOperators.is_not of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
isnot : <bound method ColumnOperators.is_not of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
startswith : <bound method ColumnOperators.startswith of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
endswith : <bound method ColumnOperators.endswith of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
contains : <bound method ColumnOperators.contains of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
match : <bound method ColumnOperators.match of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
desc : <bound method ColumnOperators.desc of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
asc : <bound method ColumnOperators.asc of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
nullslast : <bound method ColumnOperators.nulls_last of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
collate : <bound method ColumnOperators.collate of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
between : <bound method ColumnOperators.between of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
distinct : <bound method ColumnOperators.distinct of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
any_ : <bound method ColumnOperators.any_ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
all_ : <bound method ColumnOperators.all_ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__add__ : <bound method ColumnOperators.__add__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__div__ : <bound method ColumnOperators.__div__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__and__ : <bound method Operators.__and__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__or__ : <bound method Operators.__or__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__invert__ : <bound method Operators.__invert__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
op : <bound method Operators.op of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
bool_op : <bound method Operators.bool_op of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_replace_params : <bound method ClauseElement._replace_params of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
compare : <bound method ClauseElement.compare of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_ungroup : <bound method ClauseElement._ungroup of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
compile : <bound method ClauseElement.compile of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_compiler : <bound method ClauseElement._compiler of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__bool__ : <bound method ClauseElement.__bool__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################CHG_USER_ID#######################
key : CHG_USER_ID
name : CHG_USER_ID
table : kadm_tbl_col
type : DECIMAL(10, 0)
is_literal : False
primary_key : False
_user_defined_nullable : False
nullable : False
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 수정자ID
computed : None
identity : None
_creation_order : 569
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8BB048>
description : CHG_USER_ID
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__str__ : <bound method Column.__str__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
references : <bound method Column.references of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
append_foreign_key : <bound method Column.append_foreign_key of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__repr__ : <bound method Column.__repr__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_set_parent : <bound method Column._set_parent of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_on_table_attach : <bound method Column._on_table_attach of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
copy : <bound method Column.copy of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_copy : <bound method Column._copy of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_make_proxy : <bound method Column._make_proxy of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9B408>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9B408>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__dict__ : {'key': 'CHG_USER_ID', 'name': 'CHG_USER_ID', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': DECIMAL(precision=10, scale=0), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '수정자ID', 'computed': None, 'identity': None, '_creation_order': 569, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8BB048>, 'description': 'CHG_USER_ID', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FA9B408>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9EC8>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9EC8>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9EC8>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9EC8>
__lt__ : <bound method ColumnOperators.__lt__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__le__ : <bound method ColumnOperators.__le__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9EC8>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9EC8>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9EC8>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9EC8>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9EC8>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
get_children : <bound method ColumnClause.get_children of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_CHG_USER_ID
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_gen_label : <bound method ColumnClause._gen_label of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
params : <bound method Immutable.params of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_clone : <bound method Immutable._clone of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_copy_internals : <bound method Immutable._copy_internals of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_key_label : kadm_tbl_col_CHG_USER_ID
_label : kadm_tbl_col_CHG_USER_ID
_bind_param : <bound method NamedColumn._bind_param of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_negate : <bound method ColumnElement._negate of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
comparator : <sqlalchemy.sql.sqltypes._LookupExpressionAdapter.Comparator object at 0x000002203FA77818>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
operate : <bound method ColumnElement.operate of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
expression : kadm_tbl_col.CHG_USER_ID
_select_iterable : (Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'),)
base_columns : {Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')}
proxy_set : {Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_proxy_key : CHG_USER_ID
cast : <bound method ColumnElement.cast of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
label : <bound method ColumnElement.label of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_anon_label : <bound method ColumnElement._anon_label of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_anon_name_label : %(-9223371890759255572 CHG_USER_ID)s
_anon_key_label : %(-9223371890759255572 CHG_USER_ID)s
anon_label : %(-9223371890759255572 CHG_USER_ID)s
anon_key_label : %(-9223371890759255572 CHG_USER_ID)s
_dedupe_anon_label : %(-9223371890759255572 CHG_USER_ID_)s
_label_anon_label : %(-9223371890759255572 kadm_tbl_col_CHG_USER_ID)s
_label_anon_key_label : %(-9223371890759255572 kadm_tbl_col_CHG_USER_ID)s
_dedupe_label_anon_label : %(-9223371890759255572 kadm_tbl_col_CHG_USER_ID_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
concat : <bound method ColumnOperators.concat of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
like : <bound method ColumnOperators.like of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
ilike : <bound method ColumnOperators.ilike of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
in_ : <bound method ColumnOperators.in_ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
not_in : <bound method ColumnOperators.not_in of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
notin_ : <bound method ColumnOperators.not_in of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
not_like : <bound method ColumnOperators.not_like of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
notlike : <bound method ColumnOperators.not_like of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
notilike : <bound method ColumnOperators.not_ilike of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
is_ : <bound method ColumnOperators.is_ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
is_not : <bound method ColumnOperators.is_not of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
isnot : <bound method ColumnOperators.is_not of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
startswith : <bound method ColumnOperators.startswith of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
endswith : <bound method ColumnOperators.endswith of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
contains : <bound method ColumnOperators.contains of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
match : <bound method ColumnOperators.match of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
desc : <bound method ColumnOperators.desc of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
asc : <bound method ColumnOperators.asc of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
nullslast : <bound method ColumnOperators.nulls_last of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
collate : <bound method ColumnOperators.collate of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
between : <bound method ColumnOperators.between of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
distinct : <bound method ColumnOperators.distinct of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
any_ : <bound method ColumnOperators.any_ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
all_ : <bound method ColumnOperators.all_ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__add__ : <bound method ColumnOperators.__add__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__div__ : <bound method ColumnOperators.__div__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__and__ : <bound method Operators.__and__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__or__ : <bound method Operators.__or__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__invert__ : <bound method Operators.__invert__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
op : <bound method Operators.op of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
bool_op : <bound method Operators.bool_op of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_replace_params : <bound method ClauseElement._replace_params of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
compare : <bound method ClauseElement.compare of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_ungroup : <bound method ClauseElement._ungroup of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
compile : <bound method ClauseElement.compile of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_compiler : <bound method ClauseElement._compiler of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__bool__ : <bound method ClauseElement.__bool__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>
#################CHG_DTM#######################
key : CHG_DTM
name : CHG_DTM
table : kadm_tbl_col
type : DATETIME
is_literal : False
primary_key : False
_user_defined_nullable : False
nullable : False
default : None
server_default : None
server_onupdate : None
index : None
unique : None
system : False
doc : None
onupdate : None
autoincrement : auto
constraints : set()
foreign_keys : set()
comment : 수정일시
computed : None
identity : None
_creation_order : 570
dispatch : <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8BB0D8>
description : CHG_DTM
__module__ : sqlalchemy.sql.schema
__doc__ : Represents a column in a database table.
__visit_name__ : column
inherit_cache : True
__init__ : <bound method Column.__init__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_extra_kwargs : <bound method Column._extra_kwargs of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__str__ : <bound method Column.__str__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
references : <bound method Column.references of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
append_foreign_key : <bound method Column.append_foreign_key of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__repr__ : <bound method Column.__repr__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_set_parent : <bound method Column._set_parent of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_setup_on_memoized_fks : <bound method Column._setup_on_memoized_fks of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_on_table_attach : <bound method Column._on_table_attach of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
copy : <bound method Column.copy of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_copy : <bound method Column._copy of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_make_proxy : <bound method Column._make_proxy of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_original_compiler_dispatch : <bound method _generate_compiler_dispatch.<locals>._compiler_dispatch of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_dialect_kwargs_traverse_internals : [('dialect_options', symbol('DO'))]
argument_for : <bound method DialectKWArgs.argument_for of <class 'sqlalchemy.sql.schema.Column'>>
dialect_kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0248>
kwargs : <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0248>
_kw_registry : {'mysql': {<class 'sqlalchemy.sql.schema.Table'>: {'*': None}, <class 'sqlalchemy.sql.dml.Update'>: {'limit': None}, <class 'sqlalchemy.sql.schema.PrimaryKeyConstraint'>: {'using': None}, <class 'sqlalchemy.sql.schema.Index'>: {'using': None, 'length': None, 'prefix': None, 'with_parser': None}}}
_kw_reg_for_dialect_cls : <bound method DialectKWArgs._kw_reg_for_dialect_cls of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
dialect_options : {}
_validate_dialect_kwargs : <bound method DialectKWArgs._validate_dialect_kwargs of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__dict__ : {'key': 'CHG_DTM', 'name': 'CHG_DTM', 'table': Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None), 'type': DATETIME(), 'is_literal': False, 'primary_key': False, '_user_defined_nullable': False, 'nullable': False, 'default': None, 'server_default': None, 'server_onupdate': None, 'index': None, 'unique': None, 'system': False, 'doc': None, 'onupdate': None, 'autoincrement': 'auto', 'constraints': set(), 'foreign_keys': set(), 'comment': '수정일시', 'computed': None, 'identity': None, '_creation_order': 570, 'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x000002203F8BB0D8>, 'description': 'CHG_DTM', 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x000002203FAA0248>, 'dialect_options': {}}
__weakref__ : None
__hash__ : <method-wrapper '__hash__' of Column object at 0x000002203F8B9FC8>
__getattribute__ : <method-wrapper '__getattribute__' of Column object at 0x000002203F8B9FC8>
__setattr__ : <method-wrapper '__setattr__' of Column object at 0x000002203F8B9FC8>
__delattr__ : <method-wrapper '__delattr__' of Column object at 0x000002203F8B9FC8>
__lt__ : <bound method ColumnOperators.__lt__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__le__ : <bound method ColumnOperators.__le__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__eq__ : <bound method ColumnOperators.__eq__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__ne__ : <bound method ColumnOperators.__ne__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__gt__ : <bound method ColumnOperators.__gt__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__ge__ : <bound method ColumnOperators.__ge__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__new__ : <built-in method __new__ of type object at 0x00007FFE9AB07B30>
__reduce_ex__ : <built-in method __reduce_ex__ of Column object at 0x000002203F8B9FC8>
__reduce__ : <built-in method __reduce__ of Column object at 0x000002203F8B9FC8>
__subclasshook__ : <built-in method __subclasshook__ of TraversibleType object at 0x000002203CF1AF38>
__init_subclass__ : <built-in method __init_subclass__ of TraversibleType object at 0x000002203CF1AF38>
__format__ : <built-in method __format__ of Column object at 0x000002203F8B9FC8>
__sizeof__ : <built-in method __sizeof__ of Column object at 0x000002203F8B9FC8>
__dir__ : <built-in method __dir__ of Column object at 0x000002203F8B9FC8>
__class__ : <class 'sqlalchemy.sql.schema.Column'>
create_drop_stringify_dialect : default
_init_items : <bound method SchemaItem._init_items of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
info : {}
_schema_item_copy : <bound method SchemaItem._schema_item_copy of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_use_schema_map : True
_set_parent_with_dispatch : <bound method SchemaEventTarget._set_parent_with_dispatch of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
get_children : <bound method ColumnClause.get_children of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_traverse_internals : [('name', symbol('AN')), ('type', symbol('T')), ('table', symbol('CE')), ('is_literal', symbol('B'))]
_is_multiparam_column : False
entity_namespace : ImmutableColumnCollection(kadm_tbl_col.TBL_NM, kadm_tbl_col.COL_NM, kadm_tbl_col.COL_HAN_NM, kadm_tbl_col.COL_DOMA_CD, kadm_tbl_col.COL_DOMA_VAL, kadm_tbl_col.COL_SEQ, kadm_tbl_col.PANT_TBL_NM, kadm_tbl_col.PANT_COL_NM, kadm_tbl_col.PK_YN, kadm_tbl_col.BAS_VAL, kadm_tbl_col.COL_DESC, kadm_tbl_col.REG_USER_ID, kadm_tbl_col.REG_DTM, kadm_tbl_col.CHG_USER_ID, kadm_tbl_col.CHG_DTM)
_from_objects : [Table('kadm_tbl_col', MetaData(), Column('TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='테이블명'), Column('COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, primary_key=True, nullable=False, comment='컬럼명'), Column('COL_HAN_NM', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼한글명'), Column('COL_DOMA_CD', VARCHAR(length=20), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9448>, for_update=False), comment='컬럼도메인코드'), Column('COL_DOMA_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='컬럼도메인값'), Column('COL_SEQ', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='컬럼순서'), Column('PANT_TBL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모테이블명'), Column('PANT_COL_NM', VARCHAR(length=50), table=<kadm_tbl_col>, comment='부모컬럼명'), Column('PK_YN', VARCHAR(length=1), table=<kadm_tbl_col>, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x000002203F8B9948>, for_update=False), comment='PK여부'), Column('BAS_VAL', VARCHAR(length=200), table=<kadm_tbl_col>, comment='기본값'), Column('COL_DESC', VARCHAR(length=500), table=<kadm_tbl_col>, comment='컬럼설명'), Column('REG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='등록자ID'), Column('REG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='등록일시'), Column('CHG_USER_ID', DECIMAL(precision=10, scale=0), table=<kadm_tbl_col>, nullable=False, comment='수정자ID'), Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'), schema=None)]
_render_label_in_columns_clause : True
_ddl_label : kadm_tbl_col_CHG_DTM
_compare_name_for_result : <bound method ColumnClause._compare_name_for_result of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_gen_label : <bound method ColumnClause._gen_label of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_role_name : String column name or Column object for DDL foreign key constraint
allows_lambda : True
uses_inspection : True
unique_params : <bound method Immutable.unique_params of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
params : <bound method Immutable.params of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_clone : <bound method Immutable._clone of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_copy_internals : <bound method Immutable._copy_internals of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_key_label : kadm_tbl_col_CHG_DTM
_label : kadm_tbl_col_CHG_DTM
_bind_param : <bound method NamedColumn._bind_param of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_proxies : ()
_resolve_label : None
_allow_label_resolve : True
_is_implicitly_boolean : False
_alt_names : ()
self_group : <bound method ColumnElement.self_group of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_negate : <bound method ColumnElement._negate of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
comparator : <sqlalchemy.sql.sqltypes._LookupExpressionAdapter.Comparator object at 0x000002203FA703B8>
__getattr__ : <bound method ColumnElement.__getattr__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
operate : <bound method ColumnElement.operate of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
reverse_operate : <bound method ColumnElement.reverse_operate of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
expression : kadm_tbl_col.CHG_DTM
_select_iterable : (Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시'),)
base_columns : {Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')}
proxy_set : {Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')}
_uncached_proxy_set : <bound method ColumnElement._uncached_proxy_set of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
shares_lineage : <bound method ColumnElement.shares_lineage of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_proxy_key : CHG_DTM
cast : <bound method ColumnElement.cast of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
label : <bound method ColumnElement.label of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_anon_label : <bound method ColumnElement._anon_label of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_anon_name_label : %(-9223371890759255556 CHG_DTM)s
_anon_key_label : %(-9223371890759255556 CHG_DTM)s
anon_label : %(-9223371890759255556 CHG_DTM)s
anon_key_label : %(-9223371890759255556 CHG_DTM)s
_dedupe_anon_label : %(-9223371890759255556 CHG_DTM_)s
_label_anon_label : %(-9223371890759255556 kadm_tbl_col_CHG_DTM)s
_label_anon_key_label : %(-9223371890759255556 kadm_tbl_col_CHG_DTM)s
_dedupe_label_anon_label : %(-9223371890759255556 kadm_tbl_col_CHG_DTM_)s
_post_inspect : None
__slots__ : ()
timetuple : None
is_distinct_from : <bound method ColumnOperators.is_distinct_from of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
is_not_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
isnot_distinct_from : <bound method ColumnOperators.is_not_distinct_from of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__neg__ : <bound method ColumnOperators.__neg__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__contains__ : <bound method ColumnOperators.__contains__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__getitem__ : <bound method ColumnOperators.__getitem__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__lshift__ : <bound method ColumnOperators.__lshift__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__rshift__ : <bound method ColumnOperators.__rshift__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
concat : <bound method ColumnOperators.concat of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
like : <bound method ColumnOperators.like of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
ilike : <bound method ColumnOperators.ilike of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
in_ : <bound method ColumnOperators.in_ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
not_in : <bound method ColumnOperators.not_in of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
notin_ : <bound method ColumnOperators.not_in of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
not_like : <bound method ColumnOperators.not_like of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
notlike : <bound method ColumnOperators.not_like of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
not_ilike : <bound method ColumnOperators.not_ilike of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
notilike : <bound method ColumnOperators.not_ilike of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
is_ : <bound method ColumnOperators.is_ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
is_not : <bound method ColumnOperators.is_not of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
isnot : <bound method ColumnOperators.is_not of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
startswith : <bound method ColumnOperators.startswith of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
endswith : <bound method ColumnOperators.endswith of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
contains : <bound method ColumnOperators.contains of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
match : <bound method ColumnOperators.match of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
regexp_match : <bound method ColumnOperators.regexp_match of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
regexp_replace : <bound method ColumnOperators.regexp_replace of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
desc : <bound method ColumnOperators.desc of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
asc : <bound method ColumnOperators.asc of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
nulls_first : <bound method ColumnOperators.nulls_first of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
nullsfirst : <bound method ColumnOperators.nulls_first of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
nulls_last : <bound method ColumnOperators.nulls_last of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
nullslast : <bound method ColumnOperators.nulls_last of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
collate : <bound method ColumnOperators.collate of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__radd__ : <bound method ColumnOperators.__radd__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__rsub__ : <bound method ColumnOperators.__rsub__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__rmul__ : <bound method ColumnOperators.__rmul__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__rdiv__ : <bound method ColumnOperators.__rdiv__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__rmod__ : <bound method ColumnOperators.__rmod__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
between : <bound method ColumnOperators.between of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
distinct : <bound method ColumnOperators.distinct of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
any_ : <bound method ColumnOperators.any_ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
all_ : <bound method ColumnOperators.all_ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__add__ : <bound method ColumnOperators.__add__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__sub__ : <bound method ColumnOperators.__sub__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__mul__ : <bound method ColumnOperators.__mul__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__div__ : <bound method ColumnOperators.__div__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__mod__ : <bound method ColumnOperators.__mod__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__truediv__ : <bound method ColumnOperators.__truediv__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__rtruediv__ : <bound method ColumnOperators.__rtruediv__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__and__ : <bound method Operators.__and__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__or__ : <bound method Operators.__or__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__invert__ : <bound method Operators.__invert__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
op : <bound method Operators.op of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
bool_op : <bound method Operators.bool_op of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_propagate_attrs : immutabledict({})
supports_execution : False
stringify_dialect : default
bind : None
_is_clone_of : None
is_clause_element : True
is_selectable : False
_is_textual : False
_is_from_clause : False
_is_returns_rows : False
_is_text_clause : False
_is_from_container : False
_is_select_container : False
_is_select_statement : False
_is_bind_parameter : False
_is_clause_list : False
_is_lambda_element : False
_order_by_label_element : None
_cache_key_traversal : None
_set_propagate_attrs : <bound method ClauseElement._set_propagate_attrs of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_negate_in_binary : <bound method ClauseElement._negate_in_binary of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_with_binary_element_type : <bound method ClauseElement._with_binary_element_type of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_constructor : <class 'sqlalchemy.sql.schema.Column'>
_cloned_set : {Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')}
__getstate__ : <bound method ClauseElement.__getstate__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_execute_on_connection : <bound method ClauseElement._execute_on_connection of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_replace_params : <bound method ClauseElement._replace_params of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
compare : <bound method ClauseElement.compare of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_ungroup : <bound method ClauseElement._ungroup of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
compile : <bound method ClauseElement.compile of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_compile_w_cache : <bound method ClauseElement._compile_w_cache of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_compiler : <bound method ClauseElement._compiler of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__bool__ : <bound method ClauseElement.__bool__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
__nonzero__ : <bound method ClauseElement.__bool__ of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_annotate : <bound method SupportsWrappingAnnotations._annotate of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_with_annotations : <bound method SupportsWrappingAnnotations._with_annotations of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_deannotate : <bound method SupportsWrappingAnnotations._deannotate of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_annotations : immutabledict({})
_annotations_cache_key : ('_annotations', ())
_generate_cache_key : <bound method MemoizedHasCacheKey._generate_cache_key of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_generate_cache_attrs : <bound method HasCacheKey._generate_cache_attrs of <class 'sqlalchemy.sql.schema.Column'>>
_gen_cache_key : <bound method HasCacheKey._gen_cache_key of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_generate_cache_key_for_object : <bound method HasCacheKey._generate_cache_key_for_object of <class 'sqlalchemy.sql.schema.Column'>>
_memoized_keys : frozenset({'_key_label', '_label', '_render_label_in_columns_clause', '_from_objects', 'comparator', '_cloned_set'})
_reset_memoizations : <bound method HasMemoized._reset_memoizations of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_assert_no_memoizations : <bound method HasMemoized._assert_no_memoizations of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
_set_memoized_attribute : <bound method HasMemoized._set_memoized_attribute of Column('CHG_DTM', DATETIME(), table=<kadm_tbl_col>, nullable=False, comment='수정일시')>
memoized_attribute : <class 'sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute'>
memoized_instancemethod : <bound method HasMemoized.memoized_instancemethod of <class 'sqlalchemy.sql.schema.Column'>>

Process finished with exit code 0
